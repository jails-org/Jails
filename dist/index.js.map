{"version":3,"file":"index.js","sources":["../src/utils/index.ts","../node_modules/idiomorph/dist/idiomorph.esm.js","../src/utils/pubsub.ts","../src/component.ts","../src/element.ts","../src/template-system.ts","../src/index.ts"],"sourcesContent":["\nconst textarea = document.createElement('textarea')\n\nexport const g = {\n\tscope: {}\n}\n\nexport const decodeHTML = (text) => {\n\ttextarea.innerHTML = text\n\treturn textarea.value\n}\n\nexport const rAF = (fn) => {\n\tif (requestAnimationFrame)\n\t\treturn requestAnimationFrame(fn)\n\telse\n\t\treturn setTimeout(fn, 1000 / 60)\n}\n\nexport const uuid = () => {\n\treturn Math.random().toString(36).substring(2, 9)\n}\n\nexport const dup = (o) => {\n\treturn JSON.parse(JSON.stringify(o))\n}\n\nexport const safe = (execute, val) => {\n\ttry{\n\t\treturn execute()\n\t}catch(err){\n\t\treturn val || ''\n\t}\n}\n","/**\n * @typedef {object} ConfigHead\n *\n * @property {'merge' | 'append' | 'morph' | 'none'} [style]\n * @property {boolean} [block]\n * @property {boolean} [ignore]\n * @property {function(Element): boolean} [shouldPreserve]\n * @property {function(Element): boolean} [shouldReAppend]\n * @property {function(Element): boolean} [shouldRemove]\n * @property {function(Element, {added: Node[], kept: Element[], removed: Element[]}): void} [afterHeadMorphed]\n */\n\n/**\n * @typedef {object} ConfigCallbacks\n *\n * @property {function(Node): boolean} [beforeNodeAdded]\n * @property {function(Node): void} [afterNodeAdded]\n * @property {function(Element, Node): boolean} [beforeNodeMorphed]\n * @property {function(Element, Node): void} [afterNodeMorphed]\n * @property {function(Element): boolean} [beforeNodeRemoved]\n * @property {function(Element): void} [afterNodeRemoved]\n * @property {function(string, Element, \"update\" | \"remove\"): boolean} [beforeAttributeUpdated]\n * @property {function(Element): boolean} [beforeNodePantried]\n */\n\n/**\n * @typedef {object} Config\n *\n * @property {'outerHTML' | 'innerHTML'} [morphStyle]\n * @property {boolean} [ignoreActive]\n * @property {boolean} [ignoreActiveValue]\n * @property {ConfigCallbacks} [callbacks]\n * @property {ConfigHead} [head]\n */\n\n/**\n * @typedef {function} NoOp\n *\n * @returns {void}\n */\n\n/**\n * @typedef {object} ConfigHeadInternal\n *\n * @property {'merge' | 'append' | 'morph' | 'none'} style\n * @property {boolean} [block]\n * @property {boolean} [ignore]\n * @property {(function(Element): boolean) | NoOp} shouldPreserve\n * @property {(function(Element): boolean) | NoOp} shouldReAppend\n * @property {(function(Element): boolean) | NoOp} shouldRemove\n * @property {(function(Element, {added: Node[], kept: Element[], removed: Element[]}): void) | NoOp} afterHeadMorphed\n */\n\n/**\n * @typedef {object} ConfigCallbacksInternal\n *\n * @property {(function(Node): boolean) | NoOp} beforeNodeAdded\n * @property {(function(Node): void) | NoOp} afterNodeAdded\n * @property {(function(Node, Node): boolean) | NoOp} beforeNodeMorphed\n * @property {(function(Node, Node): void) | NoOp} afterNodeMorphed\n * @property {(function(Node): boolean) | NoOp} beforeNodeRemoved\n * @property {(function(Node): void) | NoOp} afterNodeRemoved\n * @property {(function(string, Element, \"update\" | \"remove\"): boolean) | NoOp} beforeAttributeUpdated\n * @property {(function(Node): boolean) | NoOp} beforeNodePantried\n */\n\n/**\n * @typedef {object} ConfigInternal\n *\n * @property {'outerHTML' | 'innerHTML'} morphStyle\n * @property {boolean} [ignoreActive]\n * @property {boolean} [ignoreActiveValue]\n * @property {ConfigCallbacksInternal} callbacks\n * @property {ConfigHeadInternal} head\n * @property {boolean} [twoPass]\n */\n\n/**\n * @typedef {Function} Morph\n *\n * @param {Element | Document} oldNode\n * @param {Element | Node | HTMLCollection | Node[] | string | null} newContent\n * @param {Config} [config]\n * @returns {undefined | Node[]}\n */\n\n// base IIFE to define idiomorph\n/**\n *\n * @type {{defaults: ConfigInternal, morph: Morph}}\n */\nvar Idiomorph = (function () {\n  \"use strict\";\n\n  /**\n   * @typedef {object} MorphContext\n   *\n   * @property {Node} target\n   * @property {Node} newContent\n   * @property {ConfigInternal} config\n   * @property {ConfigInternal['morphStyle']} morphStyle\n   * @property {ConfigInternal['ignoreActive']} ignoreActive\n   * @property {ConfigInternal['ignoreActiveValue']} ignoreActiveValue\n   * @property {Map<Node, Set<string>>} idMap\n   * @property {Set<string>} persistentIds\n   * @property {Set<string>} deadIds\n   * @property {ConfigInternal['callbacks']} callbacks\n   * @property {ConfigInternal['head']} head\n   * @property {HTMLDivElement} pantry\n   */\n\n  //=============================================================================\n  // AND NOW IT BEGINS...\n  //=============================================================================\n\n  /**\n   *\n   * @type {Set<string>}\n   */\n  let EMPTY_SET = new Set();\n\n  /**\n   * Default configuration values, updatable by users now\n   * @type {ConfigInternal}\n   */\n  let defaults = {\n    morphStyle: \"outerHTML\",\n    callbacks: {\n      beforeNodeAdded: noOp,\n      afterNodeAdded: noOp,\n      beforeNodeMorphed: noOp,\n      afterNodeMorphed: noOp,\n      beforeNodeRemoved: noOp,\n      afterNodeRemoved: noOp,\n      beforeAttributeUpdated: noOp,\n      beforeNodePantried: noOp,\n    },\n    head: {\n      style: \"merge\",\n      shouldPreserve: function (elt) {\n        return elt.getAttribute(\"im-preserve\") === \"true\";\n      },\n      shouldReAppend: function (elt) {\n        return elt.getAttribute(\"im-re-append\") === \"true\";\n      },\n      shouldRemove: noOp,\n      afterHeadMorphed: noOp,\n    },\n  };\n\n  /**\n   * =============================================================================\n   * Core Morphing Algorithm - morph, morphNormalizedContent, morphOldNodeTo, morphChildren\n   * =============================================================================\n   *\n   * @param {Element | Document} oldNode\n   * @param {Element | Node | HTMLCollection | Node[] | string | null} newContent\n   * @param {Config} [config]\n   * @returns {undefined | Node[]}\n   */\n  function morph(oldNode, newContent, config = {}) {\n    if (oldNode instanceof Document) {\n      oldNode = oldNode.documentElement;\n    }\n\n    if (typeof newContent === \"string\") {\n      newContent = parseContent(newContent);\n    }\n\n    let normalizedContent = normalizeContent(newContent);\n\n    let ctx = createMorphContext(oldNode, normalizedContent, config);\n\n    return morphNormalizedContent(oldNode, normalizedContent, ctx);\n  }\n\n  /**\n   *\n   * @param {Element} oldNode\n   * @param {Element} normalizedNewContent\n   * @param {MorphContext} ctx\n   * @returns {undefined | Node[]}\n   */\n  function morphNormalizedContent(oldNode, normalizedNewContent, ctx) {\n    if (ctx.head.block) {\n      let oldHead = oldNode.querySelector(\"head\");\n      let newHead = normalizedNewContent.querySelector(\"head\");\n      if (oldHead && newHead) {\n        let promises = handleHeadElement(newHead, oldHead, ctx);\n        // when head promises resolve, call morph again, ignoring the head tag\n        Promise.all(promises).then(function () {\n          morphNormalizedContent(\n            oldNode,\n            normalizedNewContent,\n            Object.assign(ctx, {\n              head: {\n                block: false,\n                ignore: true,\n              },\n            }),\n          );\n        });\n        return;\n      }\n    }\n\n    if (ctx.morphStyle === \"innerHTML\") {\n      // innerHTML, so we are only updating the children\n      morphChildren(normalizedNewContent, oldNode, ctx);\n      if (ctx.config.twoPass) {\n        restoreFromPantry(oldNode, ctx);\n      }\n      return Array.from(oldNode.children);\n    } else if (ctx.morphStyle === \"outerHTML\" || ctx.morphStyle == null) {\n      // otherwise find the best element match in the new content, morph that, and merge its siblings\n      // into either side of the best match\n      let bestMatch = findBestNodeMatch(normalizedNewContent, oldNode, ctx);\n\n      // stash the siblings that will need to be inserted on either side of the best match\n      let previousSibling = bestMatch?.previousSibling ?? null;\n      let nextSibling = bestMatch?.nextSibling ?? null;\n\n      // morph it\n      let morphedNode = morphOldNodeTo(oldNode, bestMatch, ctx);\n\n      if (bestMatch) {\n        // if there was a best match, merge the siblings in too and return the\n        // whole bunch\n        if (morphedNode) {\n          const elements = insertSiblings(\n            previousSibling,\n            morphedNode,\n            nextSibling,\n          );\n          if (ctx.config.twoPass) {\n            restoreFromPantry(morphedNode.parentNode, ctx);\n          }\n          return elements;\n        }\n      } else {\n        // otherwise nothing was added to the DOM\n        return [];\n      }\n    } else {\n      throw \"Do not understand how to morph style \" + ctx.morphStyle;\n    }\n  }\n\n  /**\n   * @param {Node} possibleActiveElement\n   * @param {MorphContext} ctx\n   * @returns {boolean}\n   */\n  // TODO: ignoreActive and ignoreActiveValue are marked as optional since they are not\n  //   initialised in the default config object. As a result the && in the function body may\n  //   return undefined instead of boolean. Either expand the type of the return value to\n  //   include undefined or wrap the ctx.ignoreActiveValue into a Boolean()\n  function ignoreValueOfActiveElement(possibleActiveElement, ctx) {\n    return (\n      !!ctx.ignoreActiveValue &&\n      possibleActiveElement === document.activeElement &&\n      possibleActiveElement !== document.body\n    );\n  }\n\n  /**\n   * @param {Node} oldNode root node to merge content into\n   * @param {Node | null} newContent new content to merge\n   * @param {MorphContext} ctx the merge context\n   * @returns {Node | null} the element that ended up in the DOM\n   */\n  function morphOldNodeTo(oldNode, newContent, ctx) {\n    if (ctx.ignoreActive && oldNode === document.activeElement) {\n      // don't morph focused element\n    } else if (newContent == null) {\n      if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n\n      oldNode.parentNode?.removeChild(oldNode);\n      ctx.callbacks.afterNodeRemoved(oldNode);\n      return null;\n    } else if (!isSoftMatch(oldNode, newContent)) {\n      if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n      if (ctx.callbacks.beforeNodeAdded(newContent) === false) return oldNode;\n\n      oldNode.parentNode?.replaceChild(newContent, oldNode);\n      ctx.callbacks.afterNodeAdded(newContent);\n      ctx.callbacks.afterNodeRemoved(oldNode);\n      return newContent;\n    } else {\n      if (ctx.callbacks.beforeNodeMorphed(oldNode, newContent) === false)\n        return oldNode;\n\n      if (oldNode instanceof HTMLHeadElement && ctx.head.ignore) {\n        // ignore the head element\n      } else if (\n        oldNode instanceof HTMLHeadElement &&\n        ctx.head.style !== \"morph\"\n      ) {\n        // ok to cast: if newContent wasn't also a <head>, it would've got caught in the `!isSoftMatch` branch above\n        handleHeadElement(\n          /** @type {HTMLHeadElement} */ (newContent),\n          oldNode,\n          ctx,\n        );\n      } else {\n        syncNodeFrom(newContent, oldNode, ctx);\n        if (!ignoreValueOfActiveElement(oldNode, ctx)) {\n          morphChildren(newContent, oldNode, ctx);\n        }\n      }\n      ctx.callbacks.afterNodeMorphed(oldNode, newContent);\n      return oldNode;\n    }\n    return null;\n  }\n\n  /**\n   * This is the core algorithm for matching up children.  The idea is to use id sets to try to match up\n   * nodes as faithfully as possible.  We greedily match, which allows us to keep the algorithm fast, but\n   * by using id sets, we are able to better match up with content deeper in the DOM.\n   *\n   * Basic algorithm is, for each node in the new content:\n   *\n   * - if we have reached the end of the old parent, append the new content\n   * - if the new content has an id set match with the current insertion point, morph\n   * - search for an id set match\n   * - if id set match found, morph\n   * - otherwise search for a \"soft\" match\n   * - if a soft match is found, morph\n   * - otherwise, prepend the new node before the current insertion point\n   *\n   * The two search algorithms terminate if competing node matches appear to outweigh what can be achieved\n   * with the current node.  See findIdSetMatch() and findSoftMatch() for details.\n   *\n   * @param {Node} newParent the parent element of the new content\n   * @param {Node} oldParent the old content that we are merging the new content into\n   * @param {MorphContext} ctx the merge context\n   * @returns {void}\n   */\n  function morphChildren(newParent, oldParent, ctx) {\n    if (\n      newParent instanceof HTMLTemplateElement &&\n      oldParent instanceof HTMLTemplateElement\n    ) {\n      newParent = newParent.content;\n      oldParent = oldParent.content;\n    }\n\n    /**\n     *\n     * @type {Node | null}\n     */\n    let nextNewChild = newParent.firstChild;\n    /**\n     *\n     * @type {Node | null}\n     */\n    let insertionPoint = oldParent.firstChild;\n    let newChild;\n\n    // run through all the new content\n    while (nextNewChild) {\n      newChild = nextNewChild;\n      nextNewChild = newChild.nextSibling;\n\n      // if we are at the end of the exiting parent's children, just append\n      if (insertionPoint == null) {\n        // skip add callbacks when we're going to be restoring this from the pantry in the second pass\n        if (\n          ctx.config.twoPass &&\n          ctx.persistentIds.has(/** @type {Element} */ (newChild).id)\n        ) {\n          oldParent.appendChild(newChild);\n        } else {\n          if (ctx.callbacks.beforeNodeAdded(newChild) === false) continue;\n          oldParent.appendChild(newChild);\n          ctx.callbacks.afterNodeAdded(newChild);\n        }\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // if the current node has an id set match then morph\n      if (isIdSetMatch(newChild, insertionPoint, ctx)) {\n        morphOldNodeTo(insertionPoint, newChild, ctx);\n        insertionPoint = insertionPoint.nextSibling;\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // otherwise search forward in the existing old children for an id set match\n      let idSetMatch = findIdSetMatch(\n        newParent,\n        oldParent,\n        newChild,\n        insertionPoint,\n        ctx,\n      );\n\n      // if we found a potential match, remove the nodes until that point and morph\n      if (idSetMatch) {\n        insertionPoint = removeNodesBetween(insertionPoint, idSetMatch, ctx);\n        morphOldNodeTo(idSetMatch, newChild, ctx);\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // no id set match found, so scan forward for a soft match for the current node\n      let softMatch = findSoftMatch(\n        newParent,\n        oldParent,\n        newChild,\n        insertionPoint,\n        ctx,\n      );\n\n      // if we found a soft match for the current node, morph\n      if (softMatch) {\n        insertionPoint = removeNodesBetween(insertionPoint, softMatch, ctx);\n        morphOldNodeTo(softMatch, newChild, ctx);\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // abandon all hope of morphing, just insert the new child before the insertion point\n      // and move on\n\n      // skip add callbacks when we're going to be restoring this from the pantry in the second pass\n      if (\n        ctx.config.twoPass &&\n        ctx.persistentIds.has(/** @type {Element} */ (newChild).id)\n      ) {\n        oldParent.insertBefore(newChild, insertionPoint);\n      } else {\n        if (ctx.callbacks.beforeNodeAdded(newChild) === false) continue;\n        oldParent.insertBefore(newChild, insertionPoint);\n        ctx.callbacks.afterNodeAdded(newChild);\n      }\n      removeIdsFromConsideration(ctx, newChild);\n    }\n\n    // remove any remaining old nodes that didn't match up with new content\n    while (insertionPoint !== null) {\n      let tempNode = insertionPoint;\n      insertionPoint = insertionPoint.nextSibling;\n      removeNode(tempNode, ctx);\n    }\n  }\n\n  //=============================================================================\n  // Attribute Syncing Code\n  //=============================================================================\n\n  /**\n   * @param {string} attr the attribute to be mutated\n   * @param {Element} to the element that is going to be updated\n   * @param {\"update\" | \"remove\"} updateType\n   * @param {MorphContext} ctx the merge context\n   * @returns {boolean} true if the attribute should be ignored, false otherwise\n   */\n  function ignoreAttribute(attr, to, updateType, ctx) {\n    if (\n      attr === \"value\" &&\n      ctx.ignoreActiveValue &&\n      to === document.activeElement\n    ) {\n      return true;\n    }\n    return ctx.callbacks.beforeAttributeUpdated(attr, to, updateType) === false;\n  }\n\n  /**\n   * syncs a given node with another node, copying over all attributes and\n   * inner element state from the 'from' node to the 'to' node\n   *\n   * @param {Node} from the element to copy attributes & state from\n   * @param {Node} to the element to copy attributes & state to\n   * @param {MorphContext} ctx the merge context\n   */\n  function syncNodeFrom(from, to, ctx) {\n    let type = from.nodeType;\n\n    // if is an element type, sync the attributes from the\n    // new node into the new node\n    if (type === 1 /* element type */) {\n      const fromEl = /** @type {Element} */ (from);\n      const toEl = /** @type {Element} */ (to);\n      const fromAttributes = fromEl.attributes;\n      const toAttributes = toEl.attributes;\n      for (const fromAttribute of fromAttributes) {\n        if (ignoreAttribute(fromAttribute.name, toEl, \"update\", ctx)) {\n          continue;\n        }\n        if (toEl.getAttribute(fromAttribute.name) !== fromAttribute.value) {\n          toEl.setAttribute(fromAttribute.name, fromAttribute.value);\n        }\n      }\n      // iterate backwards to avoid skipping over items when a delete occurs\n      for (let i = toAttributes.length - 1; 0 <= i; i--) {\n        const toAttribute = toAttributes[i];\n\n        // toAttributes is a live NamedNodeMap, so iteration+mutation is unsafe\n        // e.g. custom element attribute callbacks can remove other attributes\n        if (!toAttribute) continue;\n\n        if (!fromEl.hasAttribute(toAttribute.name)) {\n          if (ignoreAttribute(toAttribute.name, toEl, \"remove\", ctx)) {\n            continue;\n          }\n          toEl.removeAttribute(toAttribute.name);\n        }\n      }\n    }\n\n    // sync text nodes\n    if (type === 8 /* comment */ || type === 3 /* text */) {\n      if (to.nodeValue !== from.nodeValue) {\n        to.nodeValue = from.nodeValue;\n      }\n    }\n\n    if (!ignoreValueOfActiveElement(to, ctx)) {\n      // sync input values\n      syncInputValue(from, to, ctx);\n    }\n  }\n\n  /**\n   * @param {Element} from element to sync the value from\n   * @param {Element} to element to sync the value to\n   * @param {string} attributeName the attribute name\n   * @param {MorphContext} ctx the merge context\n   */\n  function syncBooleanAttribute(from, to, attributeName, ctx) {\n    // TODO: prefer set/getAttribute here\n    if (!(from instanceof Element && to instanceof Element)) return;\n    // @ts-ignore this function is only used on boolean attrs that are reflected as dom properties\n    const fromLiveValue = from[attributeName],\n      toLiveValue = to[attributeName];\n    if (fromLiveValue !== toLiveValue) {\n      let ignoreUpdate = ignoreAttribute(attributeName, to, \"update\", ctx);\n      if (!ignoreUpdate) {\n        // update attribute's associated DOM property\n        // @ts-ignore this function is only used on boolean attrs that are reflected as dom properties\n        to[attributeName] = from[attributeName];\n      }\n      if (fromLiveValue) {\n        if (!ignoreUpdate) {\n          // TODO: do we really want this? tests say so but it feels wrong\n          to.setAttribute(attributeName, fromLiveValue);\n        }\n      } else {\n        if (!ignoreAttribute(attributeName, to, \"remove\", ctx)) {\n          to.removeAttribute(attributeName);\n        }\n      }\n    }\n  }\n\n  /**\n   * NB: many bothans died to bring us information:\n   *\n   *  https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js\n   *  https://github.com/choojs/nanomorph/blob/master/lib/morph.jsL113\n   *\n   * @param {Node} from the element to sync the input value from\n   * @param {Node} to the element to sync the input value to\n   * @param {MorphContext} ctx the merge context\n   */\n  function syncInputValue(from, to, ctx) {\n    if (\n      from instanceof HTMLInputElement &&\n      to instanceof HTMLInputElement &&\n      from.type !== \"file\"\n    ) {\n      let fromValue = from.value;\n      let toValue = to.value;\n\n      // sync boolean attributes\n      syncBooleanAttribute(from, to, \"checked\", ctx);\n      syncBooleanAttribute(from, to, \"disabled\", ctx);\n\n      if (!from.hasAttribute(\"value\")) {\n        if (!ignoreAttribute(\"value\", to, \"remove\", ctx)) {\n          to.value = \"\";\n          to.removeAttribute(\"value\");\n        }\n      } else if (fromValue !== toValue) {\n        if (!ignoreAttribute(\"value\", to, \"update\", ctx)) {\n          to.setAttribute(\"value\", fromValue);\n          to.value = fromValue;\n        }\n      }\n      // TODO: QUESTION(1cg): this used to only check `from` unlike the other branches -- why?\n      // did I break something?\n    } else if (\n      from instanceof HTMLOptionElement &&\n      to instanceof HTMLOptionElement\n    ) {\n      syncBooleanAttribute(from, to, \"selected\", ctx);\n    } else if (\n      from instanceof HTMLTextAreaElement &&\n      to instanceof HTMLTextAreaElement\n    ) {\n      let fromValue = from.value;\n      let toValue = to.value;\n      if (ignoreAttribute(\"value\", to, \"update\", ctx)) {\n        return;\n      }\n      if (fromValue !== toValue) {\n        to.value = fromValue;\n      }\n      if (to.firstChild && to.firstChild.nodeValue !== fromValue) {\n        to.firstChild.nodeValue = fromValue;\n      }\n    }\n  }\n\n  /**\n   * =============================================================================\n   *  The HEAD tag can be handled specially, either w/ a 'merge' or 'append' style\n   * =============================================================================\n   * @param {Element} newHeadTag\n   * @param {Element} currentHead\n   * @param {MorphContext} ctx\n   * @returns {Promise<void>[]}\n   */\n  function handleHeadElement(newHeadTag, currentHead, ctx) {\n    /**\n     * @type {Node[]}\n     */\n    let added = [];\n    /**\n     * @type {Element[]}\n     */\n    let removed = [];\n    /**\n     * @type {Element[]}\n     */\n    let preserved = [];\n    /**\n     * @type {Element[]}\n     */\n    let nodesToAppend = [];\n\n    let headMergeStyle = ctx.head.style;\n\n    // put all new head elements into a Map, by their outerHTML\n    let srcToNewHeadNodes = new Map();\n    for (const newHeadChild of newHeadTag.children) {\n      srcToNewHeadNodes.set(newHeadChild.outerHTML, newHeadChild);\n    }\n\n    // for each elt in the current head\n    for (const currentHeadElt of currentHead.children) {\n      // If the current head element is in the map\n      let inNewContent = srcToNewHeadNodes.has(currentHeadElt.outerHTML);\n      let isReAppended = ctx.head.shouldReAppend(currentHeadElt);\n      let isPreserved = ctx.head.shouldPreserve(currentHeadElt);\n      if (inNewContent || isPreserved) {\n        if (isReAppended) {\n          // remove the current version and let the new version replace it and re-execute\n          removed.push(currentHeadElt);\n        } else {\n          // this element already exists and should not be re-appended, so remove it from\n          // the new content map, preserving it in the DOM\n          srcToNewHeadNodes.delete(currentHeadElt.outerHTML);\n          preserved.push(currentHeadElt);\n        }\n      } else {\n        if (headMergeStyle === \"append\") {\n          // we are appending and this existing element is not new content\n          // so if and only if it is marked for re-append do we do anything\n          if (isReAppended) {\n            removed.push(currentHeadElt);\n            nodesToAppend.push(currentHeadElt);\n          }\n        } else {\n          // if this is a merge, we remove this content since it is not in the new head\n          if (ctx.head.shouldRemove(currentHeadElt) !== false) {\n            removed.push(currentHeadElt);\n          }\n        }\n      }\n    }\n\n    // Push the remaining new head elements in the Map into the\n    // nodes to append to the head tag\n    nodesToAppend.push(...srcToNewHeadNodes.values());\n    log(\"to append: \", nodesToAppend);\n\n    let promises = [];\n    for (const newNode of nodesToAppend) {\n      log(\"adding: \", newNode);\n      // TODO: This could theoretically be null, based on type\n      let newElt = /** @type {ChildNode} */ (\n        document.createRange().createContextualFragment(newNode.outerHTML)\n          .firstChild\n      );\n      log(newElt);\n      if (ctx.callbacks.beforeNodeAdded(newElt) !== false) {\n        if (\n          (\"href\" in newElt && newElt.href) ||\n          (\"src\" in newElt && newElt.src)\n        ) {\n          /** @type {(result?: any) => void} */ let resolve;\n          let promise = new Promise(function (_resolve) {\n            resolve = _resolve;\n          });\n          newElt.addEventListener(\"load\", function () {\n            resolve();\n          });\n          promises.push(promise);\n        }\n        currentHead.appendChild(newElt);\n        ctx.callbacks.afterNodeAdded(newElt);\n        added.push(newElt);\n      }\n    }\n\n    // remove all removed elements, after we have appended the new elements to avoid\n    // additional network requests for things like style sheets\n    for (const removedElement of removed) {\n      if (ctx.callbacks.beforeNodeRemoved(removedElement) !== false) {\n        currentHead.removeChild(removedElement);\n        ctx.callbacks.afterNodeRemoved(removedElement);\n      }\n    }\n\n    ctx.head.afterHeadMorphed(currentHead, {\n      added: added,\n      kept: preserved,\n      removed: removed,\n    });\n    return promises;\n  }\n\n  //=============================================================================\n  // Misc\n  //=============================================================================\n\n  /**\n   * @param {any[]} _args\n   */\n  function log(..._args) {\n    //console.log(args);\n  }\n\n  function noOp() {}\n\n  /**\n   * Deep merges the config object and the Idiomoroph.defaults object to\n   * produce a final configuration object\n   * @param {Config} config\n   * @returns {ConfigInternal}\n   */\n  function mergeDefaults(config) {\n    /**\n     * @type {ConfigInternal}\n     */\n    let finalConfig = Object.assign({}, defaults);\n\n    // copy top level stuff into final config\n    Object.assign(finalConfig, config);\n\n    // copy callbacks into final config (do this to deep merge the callbacks)\n    finalConfig.callbacks = Object.assign(\n      {},\n      defaults.callbacks,\n      config.callbacks,\n    );\n\n    // copy head config into final config  (do this to deep merge the head)\n    finalConfig.head = Object.assign({}, defaults.head, config.head);\n\n    return finalConfig;\n  }\n\n  /**\n   *\n   * @param {Element} oldNode\n   * @param {Element} newContent\n   * @param {Config} config\n   * @returns {MorphContext}\n   */\n  function createMorphContext(oldNode, newContent, config) {\n    const mergedConfig = mergeDefaults(config);\n    return {\n      target: oldNode,\n      newContent: newContent,\n      config: mergedConfig,\n      morphStyle: mergedConfig.morphStyle,\n      ignoreActive: mergedConfig.ignoreActive,\n      ignoreActiveValue: mergedConfig.ignoreActiveValue,\n      idMap: createIdMap(oldNode, newContent),\n      deadIds: new Set(),\n      persistentIds: mergedConfig.twoPass\n        ? createPersistentIds(oldNode, newContent)\n        : new Set(),\n      pantry: mergedConfig.twoPass\n        ? createPantry()\n        : document.createElement(\"div\"),\n      callbacks: mergedConfig.callbacks,\n      head: mergedConfig.head,\n    };\n  }\n\n  function createPantry() {\n    const pantry = document.createElement(\"div\");\n    pantry.hidden = true;\n    document.body.insertAdjacentElement(\"afterend\", pantry);\n    return pantry;\n  }\n\n  /**\n   *\n   * @param {Node | null} node1\n   * @param {Node | null} node2\n   * @param {MorphContext} ctx\n   * @returns {boolean}\n   */\n  // TODO: The function handles this as if it's Element or null, but the function is called in\n  //   places where the arguments may be just a Node, not an Element\n  function isIdSetMatch(node1, node2, ctx) {\n    if (node1 == null || node2 == null) {\n      return false;\n    }\n    if (\n      node1 instanceof Element &&\n      node2 instanceof Element &&\n      node1.tagName === node2.tagName\n    ) {\n      if (node1.id !== \"\" && node1.id === node2.id) {\n        return true;\n      } else {\n        return getIdIntersectionCount(ctx, node1, node2) > 0;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param {Node | null} oldNode\n   * @param {Node | null} newNode\n   * @returns {boolean}\n   */\n  function isSoftMatch(oldNode, newNode) {\n    if (oldNode == null || newNode == null) {\n      return false;\n    }\n    // ok to cast: if one is not element, `id` or `tagName` will be undefined and we'll compare that\n    // If oldNode has an `id` with possible state and it doesn't match newNode.id then avoid morphing\n    if (\n      /** @type {Element} */ (oldNode).id &&\n      /** @type {Element} */ (oldNode).id !==\n        /** @type {Element} */ (newNode).id\n    ) {\n      return false;\n    }\n    return (\n      oldNode.nodeType === newNode.nodeType &&\n      /** @type {Element} */ (oldNode).tagName ===\n        /** @type {Element} */ (newNode).tagName\n    );\n  }\n\n  /**\n   *\n   * @param {Node} startInclusive\n   * @param {Node} endExclusive\n   * @param {MorphContext} ctx\n   * @returns {Node | null}\n   */\n  function removeNodesBetween(startInclusive, endExclusive, ctx) {\n    /** @type {Node | null} */ let cursor = startInclusive;\n    while (cursor !== endExclusive) {\n      let tempNode = /** @type {Node} */ (cursor);\n      // TODO: Prefer assigning to a new variable here or expand the type of startInclusive\n      //  to be Node | null\n      cursor = tempNode.nextSibling;\n      removeNode(tempNode, ctx);\n    }\n    removeIdsFromConsideration(ctx, endExclusive);\n    return endExclusive.nextSibling;\n  }\n\n  /**\n   * =============================================================================\n   *  Scans forward from the insertionPoint in the old parent looking for a potential id match\n   *  for the newChild.  We stop if we find a potential id match for the new child OR\n   *  if the number of potential id matches we are discarding is greater than the\n   *  potential id matches for the new child\n   * =============================================================================\n   * @param {Node} newContent\n   * @param {Node} oldParent\n   * @param {Node} newChild\n   * @param {Node} insertionPoint\n   * @param {MorphContext} ctx\n   * @returns {null | Node}\n   */\n  function findIdSetMatch(\n    newContent,\n    oldParent,\n    newChild,\n    insertionPoint,\n    ctx,\n  ) {\n    // max id matches we are willing to discard in our search\n    let newChildPotentialIdCount = getIdIntersectionCount(\n      ctx,\n      newChild,\n      oldParent,\n    );\n\n    /**\n     * @type {Node | null}\n     */\n    let potentialMatch = null;\n\n    // only search forward if there is a possibility of an id match\n    if (newChildPotentialIdCount > 0) {\n      // TODO: This is ghosting the potentialMatch variable outside of this block.\n      //   Probably an error\n      potentialMatch = insertionPoint;\n      // if there is a possibility of an id match, scan forward\n      // keep track of the potential id match count we are discarding (the\n      // newChildPotentialIdCount must be greater than this to make it likely\n      // worth it)\n      let otherMatchCount = 0;\n      while (potentialMatch != null) {\n        // If we have an id match, return the current potential match\n        if (isIdSetMatch(newChild, potentialMatch, ctx)) {\n          return potentialMatch;\n        }\n\n        // computer the other potential matches of this new content\n        otherMatchCount += getIdIntersectionCount(\n          ctx,\n          potentialMatch,\n          newContent,\n        );\n        if (otherMatchCount > newChildPotentialIdCount) {\n          // if we have more potential id matches in _other_ content, we\n          // do not have a good candidate for an id match, so return null\n          return null;\n        }\n\n        // advanced to the next old content child\n        potentialMatch = potentialMatch.nextSibling;\n      }\n    }\n    return potentialMatch;\n  }\n\n  /**\n   * =============================================================================\n   *  Scans forward from the insertionPoint in the old parent looking for a potential soft match\n   *  for the newChild.  We stop if we find a potential soft match for the new child OR\n   *  if we find a potential id match in the old parents children OR if we find two\n   *  potential soft matches for the next two pieces of new content\n   * =============================================================================\n   * @param {Node} newContent\n   * @param {Node} oldParent\n   * @param {Node} newChild\n   * @param {Node} insertionPoint\n   * @param {MorphContext} ctx\n   * @returns {null | Node}\n   */\n  function findSoftMatch(newContent, oldParent, newChild, insertionPoint, ctx) {\n    /**\n     * @type {Node | null}\n     */\n    let potentialSoftMatch = insertionPoint;\n    /**\n     * @type {Node | null}\n     */\n    let nextSibling = newChild.nextSibling;\n    let siblingSoftMatchCount = 0;\n\n    while (potentialSoftMatch != null) {\n      if (getIdIntersectionCount(ctx, potentialSoftMatch, newContent) > 0) {\n        // the current potential soft match has a potential id set match with the remaining new\n        // content so bail out of looking\n        return null;\n      }\n\n      // if we have a soft match with the current node, return it\n      if (isSoftMatch(potentialSoftMatch, newChild)) {\n        return potentialSoftMatch;\n      }\n\n      if (isSoftMatch(potentialSoftMatch, nextSibling)) {\n        // the next new node has a soft match with this node, so\n        // increment the count of future soft matches\n        siblingSoftMatchCount++;\n        // ok to cast: if it was null it couldn't be a soft match\n        nextSibling = /** @type {Node} */ (nextSibling).nextSibling;\n\n        // If there are two future soft matches, bail to allow the siblings to soft match\n        // so that we don't consume future soft matches for the sake of the current node\n        if (siblingSoftMatchCount >= 2) {\n          return null;\n        }\n      }\n\n      // advanced to the next old content child\n      potentialSoftMatch = potentialSoftMatch.nextSibling;\n    }\n\n    return potentialSoftMatch;\n  }\n\n  /** @type {WeakSet<Node>} */\n  const generatedByIdiomorph = new WeakSet();\n\n  /**\n   *\n   * @param {string} newContent\n   * @returns {Node | null | DocumentFragment}\n   */\n  function parseContent(newContent) {\n    let parser = new DOMParser();\n\n    // remove svgs to avoid false-positive matches on head, etc.\n    let contentWithSvgsRemoved = newContent.replace(\n      /<svg(\\s[^>]*>|>)([\\s\\S]*?)<\\/svg>/gim,\n      \"\",\n    );\n\n    // if the newContent contains a html, head or body tag, we can simply parse it w/o wrapping\n    if (\n      contentWithSvgsRemoved.match(/<\\/html>/) ||\n      contentWithSvgsRemoved.match(/<\\/head>/) ||\n      contentWithSvgsRemoved.match(/<\\/body>/)\n    ) {\n      let content = parser.parseFromString(newContent, \"text/html\");\n      // if it is a full HTML document, return the document itself as the parent container\n      if (contentWithSvgsRemoved.match(/<\\/html>/)) {\n        generatedByIdiomorph.add(content);\n        return content;\n      } else {\n        // otherwise return the html element as the parent container\n        let htmlElement = content.firstChild;\n        if (htmlElement) {\n          generatedByIdiomorph.add(htmlElement);\n          return htmlElement;\n        } else {\n          return null;\n        }\n      }\n    } else {\n      // if it is partial HTML, wrap it in a template tag to provide a parent element and also to help\n      // deal with touchy tags like tr, tbody, etc.\n      let responseDoc = parser.parseFromString(\n        \"<body><template>\" + newContent + \"</template></body>\",\n        \"text/html\",\n      );\n      let content = /** @type {HTMLTemplateElement} */ (\n        responseDoc.body.querySelector(\"template\")\n      ).content;\n      generatedByIdiomorph.add(content);\n      return content;\n    }\n  }\n\n  /**\n   *\n   * @param {null | Node | HTMLCollection | Node[] | Document & {generatedByIdiomorph:boolean}} newContent\n   * @returns {Element}\n   */\n  function normalizeContent(newContent) {\n    if (newContent == null) {\n      // noinspection UnnecessaryLocalVariableJS\n      const dummyParent = document.createElement(\"div\");\n      return dummyParent;\n    } else if (generatedByIdiomorph.has(/** @type {Element} */ (newContent))) {\n      // the template tag created by idiomorph parsing can serve as a dummy parent\n      return /** @type {Element} */ (newContent);\n    } else if (newContent instanceof Node) {\n      // a single node is added as a child to a dummy parent\n      const dummyParent = document.createElement(\"div\");\n      dummyParent.append(newContent);\n      return dummyParent;\n    } else {\n      // all nodes in the array or HTMLElement collection are consolidated under\n      // a single dummy parent element\n      const dummyParent = document.createElement(\"div\");\n      for (const elt of [...newContent]) {\n        dummyParent.append(elt);\n      }\n      return dummyParent;\n    }\n  }\n\n  /**\n   *\n   * @param {Node | null} previousSibling\n   * @param {Node} morphedNode\n   * @param {Node | null} nextSibling\n   * @returns {Node[]}\n   */\n  function insertSiblings(previousSibling, morphedNode, nextSibling) {\n    /**\n     * @type {Node[]}\n     */\n    let stack = [];\n    /**\n     * @type {Node[]}\n     */\n    let added = [];\n    while (previousSibling != null) {\n      stack.push(previousSibling);\n      previousSibling = previousSibling.previousSibling;\n    }\n    // Base the loop on the node variable, so that you do not need runtime checks for\n    // undefined value inside the loop\n    let node = stack.pop();\n    while (node !== undefined) {\n      added.push(node); // push added preceding siblings on in order and insert\n      morphedNode.parentElement?.insertBefore(node, morphedNode);\n      node = stack.pop();\n    }\n    added.push(morphedNode);\n    while (nextSibling != null) {\n      stack.push(nextSibling);\n      added.push(nextSibling); // here we are going in order, so push on as we scan, rather than add\n      nextSibling = nextSibling.nextSibling;\n    }\n    while (stack.length > 0) {\n      const node = /** @type {Node} */ (stack.pop());\n      morphedNode.parentElement?.insertBefore(node, morphedNode.nextSibling);\n    }\n    return added;\n  }\n\n  /**\n   *\n   * @param {Element} newContent\n   * @param {Element} oldNode\n   * @param {MorphContext} ctx\n   * @returns {Node | null}\n   */\n  function findBestNodeMatch(newContent, oldNode, ctx) {\n    /**\n     * @type {Node | null}\n     */\n    let currentElement;\n    currentElement = newContent.firstChild;\n    /**\n     * @type {Node | null}\n     */\n    let bestElement = currentElement;\n    let score = 0;\n    while (currentElement) {\n      let newScore = scoreElement(currentElement, oldNode, ctx);\n      if (newScore > score) {\n        bestElement = currentElement;\n        score = newScore;\n      }\n      currentElement = currentElement.nextSibling;\n    }\n    return bestElement;\n  }\n\n  /**\n   *\n   * @param {Node | null} node1\n   * @param {Element} node2\n   * @param {MorphContext} ctx\n   * @returns {number}\n   */\n  // TODO: The function handles node1 and node2 as if they are Elements but the function is\n  //   called in places where node1 and node2 may be just Nodes, not Elements\n  function scoreElement(node1, node2, ctx) {\n    if (isSoftMatch(node2, node1)) {\n      // ok to cast: isSoftMatch performs a null check\n      return (\n        0.5 + getIdIntersectionCount(ctx, /** @type {Node} */ (node1), node2)\n      );\n    }\n    return 0;\n  }\n\n  /**\n   *\n   * @param {Node} tempNode\n   * @param {MorphContext} ctx\n   */\n  // TODO: The function handles tempNode as if it's Element but the function is called in\n  //   places where tempNode may be just a Node, not an Element\n  function removeNode(tempNode, ctx) {\n    removeIdsFromConsideration(ctx, tempNode);\n    // skip remove callbacks when we're going to be restoring this from the pantry in the second pass\n    if (\n      ctx.config.twoPass &&\n      hasPersistentIdNodes(ctx, tempNode) &&\n      tempNode instanceof Element\n    ) {\n      moveToPantry(tempNode, ctx);\n    } else {\n      if (ctx.callbacks.beforeNodeRemoved(tempNode) === false) return;\n      tempNode.parentNode?.removeChild(tempNode);\n      ctx.callbacks.afterNodeRemoved(tempNode);\n    }\n  }\n\n  /**\n   *\n   * @param {Node} node\n   * @param {MorphContext} ctx\n   */\n  function moveToPantry(node, ctx) {\n    if (ctx.callbacks.beforeNodePantried(node) === false) return;\n\n    Array.from(node.childNodes).forEach((child) => {\n      moveToPantry(child, ctx);\n    });\n\n    // After processing children, process the current node\n    if (ctx.persistentIds.has(/** @type {Element} */ (node).id)) {\n      // @ts-ignore - use proposed moveBefore feature\n      if (ctx.pantry.moveBefore) {\n        // @ts-ignore - use proposed moveBefore feature\n        ctx.pantry.moveBefore(node, null);\n      } else {\n        ctx.pantry.insertBefore(node, null);\n      }\n    } else {\n      if (ctx.callbacks.beforeNodeRemoved(node) === false) return;\n      node.parentNode?.removeChild(node);\n      ctx.callbacks.afterNodeRemoved(node);\n    }\n  }\n\n  /**\n   *\n   * @param {Node | null} root\n   * @param {MorphContext} ctx\n   */\n  function restoreFromPantry(root, ctx) {\n    if (root instanceof Element) {\n      Array.from(ctx.pantry.children)\n        .reverse()\n        .forEach((element) => {\n          const matchElement = root.querySelector(`#${element.id}`);\n          if (matchElement) {\n            // @ts-ignore - use proposed moveBefore feature\n            if (matchElement.parentElement?.moveBefore) {\n              // @ts-ignore - use proposed moveBefore feature\n              matchElement.parentElement.moveBefore(element, matchElement);\n              while (matchElement.hasChildNodes()) {\n                // @ts-ignore - use proposed moveBefore feature\n                element.moveBefore(matchElement.firstChild, null);\n              }\n            } else {\n              matchElement.before(element);\n              while (matchElement.firstChild) {\n                element.insertBefore(matchElement.firstChild, null);\n              }\n            }\n            if (\n              ctx.callbacks.beforeNodeMorphed(element, matchElement) !== false\n            ) {\n              syncNodeFrom(matchElement, element, ctx);\n              ctx.callbacks.afterNodeMorphed(element, matchElement);\n            }\n            matchElement.remove();\n          }\n        });\n      ctx.pantry.remove();\n    }\n  }\n\n  //=============================================================================\n  // ID Set Functions\n  //=============================================================================\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {string} id\n   * @returns {boolean}\n   */\n  function isIdInConsideration(ctx, id) {\n    return !ctx.deadIds.has(id);\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {string} id\n   * @param {Node} targetNode\n   * @returns {boolean}\n   */\n  function idIsWithinNode(ctx, id, targetNode) {\n    let idSet = ctx.idMap.get(targetNode) || EMPTY_SET;\n    return idSet.has(id);\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {Node} node\n   * @returns {void}\n   */\n  function removeIdsFromConsideration(ctx, node) {\n    let idSet = ctx.idMap.get(node) || EMPTY_SET;\n    for (const id of idSet) {\n      ctx.deadIds.add(id);\n    }\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function hasPersistentIdNodes(ctx, node) {\n    for (const id of ctx.idMap.get(node) || EMPTY_SET) {\n      if (ctx.persistentIds.has(id)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {Node} node1\n   * @param {Node} node2\n   * @returns {number}\n   */\n  function getIdIntersectionCount(ctx, node1, node2) {\n    let sourceSet = ctx.idMap.get(node1) || EMPTY_SET;\n    let matchCount = 0;\n    for (const id of sourceSet) {\n      // a potential match is an id in the source and potentialIdsSet, but\n      // that has not already been merged into the DOM\n      if (isIdInConsideration(ctx, id) && idIsWithinNode(ctx, id, node2)) {\n        ++matchCount;\n      }\n    }\n    return matchCount;\n  }\n\n  /**\n   * @param {Element} content\n   * @returns {Element[]}\n   */\n  function nodesWithIds(content) {\n    let nodes = Array.from(content.querySelectorAll(\"[id]\"));\n    if (content.id) {\n      nodes.push(content);\n    }\n    return nodes;\n  }\n\n  /**\n   * A bottom up algorithm that finds all elements with ids in the node\n   * argument and populates id sets for those nodes and all their parents, generating\n   * a set of ids contained within all nodes for the entire hierarchy in the DOM\n   *\n   * @param {Element} node\n   * @param {Map<Node, Set<string>>} idMap\n   */\n  function populateIdMapForNode(node, idMap) {\n    let nodeParent = node.parentElement;\n    for (const elt of nodesWithIds(node)) {\n      /**\n       * @type {Element|null}\n       */\n      let current = elt;\n      // walk up the parent hierarchy of that element, adding the id\n      // of element to the parent's id set\n      while (current !== nodeParent && current != null) {\n        let idSet = idMap.get(current);\n        // if the id set doesn't exist, create it and insert it in the  map\n        if (idSet == null) {\n          idSet = new Set();\n          idMap.set(current, idSet);\n        }\n        idSet.add(elt.id);\n        current = current.parentElement;\n      }\n    }\n  }\n\n  /**\n   * This function computes a map of nodes to all ids contained within that node (inclusive of the\n   * node).  This map can be used to ask if two nodes have intersecting sets of ids, which allows\n   * for a looser definition of \"matching\" than tradition id matching, and allows child nodes\n   * to contribute to a parent nodes matching.\n   *\n   * @param {Element} oldContent  the old content that will be morphed\n   * @param {Element} newContent  the new content to morph to\n   * @returns {Map<Node, Set<string>>} a map of nodes to id sets for the\n   */\n  function createIdMap(oldContent, newContent) {\n    /**\n     *\n     * @type {Map<Node, Set<string>>}\n     */\n    let idMap = new Map();\n    populateIdMapForNode(oldContent, idMap);\n    populateIdMapForNode(newContent, idMap);\n    return idMap;\n  }\n\n  /**\n   * @param {Element} oldContent  the old content that will be morphed\n   * @param {Element} newContent  the new content to morph to\n   * @returns {Set<string>} the id set of all persistent nodes that exist in both old and new content\n   */\n  function createPersistentIds(oldContent, newContent) {\n    const toIdTagName = (node) => node.tagName + \"#\" + node.id;\n    const oldIdSet = new Set(nodesWithIds(oldContent).map(toIdTagName));\n\n    let matchIdSet = new Set();\n    for (const newNode of nodesWithIds(newContent)) {\n      if (oldIdSet.has(toIdTagName(newNode))) {\n        matchIdSet.add(newNode.id);\n      }\n    }\n    return matchIdSet;\n  }\n\n  //=============================================================================\n  // This is what ends up becoming the Idiomorph global object\n  //=============================================================================\n  return {\n    morph,\n    defaults,\n  };\n})();\n\nexport {Idiomorph};\n","\nconst topics: any = {}\nconst _async: any = {}\n\nexport const publish = (name, params) => {\n\t_async[name] = Object.assign({}, _async[name], params)\n\tif (topics[name])\n\t\ttopics[name].forEach(topic => topic(params))\n}\n\nexport const subscribe = (name, method) => {\n\ttopics[name] = topics[name] || []\n\ttopics[name].push(method)\n\tif (name in _async) {\n\t\tmethod(_async[name])\n\t}\n\treturn () => {\n\t\ttopics[name] = topics[name].filter( fn => fn != method )\n\t}\n}\n","import { safe, g, dup } from './utils'\nimport { Idiomorph } from 'idiomorph/dist/idiomorph.esm'\nimport { publish, subscribe } from './utils/pubsub'\n\nexport const Component = ({ name, module, dependencies, node, templates, signal, register }) => {\n\n\tlet tick\n\tlet preserve\t\t= []\n\n\tconst _model \t\t= module.model || {}\n\tconst initialState \t= (new Function( `return ${node.getAttribute('html-model') || '{}'}`))()\n\tconst tplid \t\t= node.getAttribute('tplid')\n\tconst scopeid \t\t= node.getAttribute('html-scopeid')\n\tconst tpl \t\t\t= templates[ tplid ]\n\tconst scope \t\t= g.scope[ scopeid ]\n\tconst model  \t\t= dup(module?.model?.apply ? _model({ elm:node, initialState }) : _model)\n\tconst state \t\t= Object.assign({}, scope, model, initialState)\n\tconst view \t\t\t= module.view? module.view : (data) => data\n\n\tconst base = {\n\t\tname,\n\t\tmodel,\n\t\telm: node,\n\t\ttemplate: tpl.template,\n\t\tdependencies,\n\t\tpublish,\n\t\tsubscribe,\n\n\t\tmain(fn) {\n\t\t\tnode.addEventListener(':mount', fn)\n\t\t},\n\n\t\t/**\n\t\t * @State\n\t\t */\n\t\tstate : {\n\n\t\t\tprotected( list ) {\n\t\t\t\tif( list ) {\n\t\t\t\t\tpreserve = list\n\t\t\t\t} else {\n\t\t\t\t\treturn preserve\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsave(data) {\n\t\t\t\tif( data.constructor === Function ) {\n\t\t\t\t\tdata( state )\n\t\t\t\t} else {\n\t\t\t\t\tObject.assign(state, data)\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tset( data ) {\n\n\t\t\t\tif (!document.body.contains(node)) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif( data.constructor === Function ) {\n\t\t\t\t\tdata(state)\n\t\t\t\t} else {\n\t\t\t\t\tObject.assign(state, data)\n\t\t\t\t}\n\n\t\t\t\tconst newstate = Object.assign({}, state, scope)\n\t\t\t\trender(newstate)\n\n\t\t\t\treturn Promise.resolve(newstate)\n\t\t\t},\n\n\t\t\tget() {\n\t\t\t\treturn Object.assign({}, state)\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * @Events\n\t\t */\n\t\ton( ev, selectorOrCallback, callback ) {\n\n\t\t\tif( callback ) {\n\t\t\t\tcallback.handler = (e) => {\n\t\t\t\t\tconst detail = e.detail || {}\n\t\t\t\t\tlet parent = e.target\n\t\t\t\t\twhile (parent) {\n\t\t\t\t\t\tif (parent.matches(selectorOrCallback)) {\n\t\t\t\t\t\t\te.delegateTarget = parent\n\t\t\t\t\t\t\tcallback.apply(node, [e].concat(detail.args))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (parent === node) break\n\t\t\t\t\t\tparent = parent.parentNode\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnode.addEventListener(ev, callback.handler, {\n\t\t\t\t\tsignal,\n\t\t\t\t\tcapture: (ev == 'focus' || ev == 'blur' || ev == 'mouseenter' || ev == 'mouseleave')\n\t\t\t\t})\n\n\t\t\t} else {\n\t\t\t\tselectorOrCallback.handler = (e) => {\n\t\t\t\t\te.delegateTarget = node\n\t\t\t\t\tselectorOrCallback.apply(node, [e].concat(e.detail.args))\n\t\t\t\t}\n\t\t\t\tnode.addEventListener(ev, selectorOrCallback.handler, { signal })\n\t\t\t}\n\n\t\t},\n\n\t\toff( ev, callback ) {\n\t\t\tif( callback.handler ) {\n\t\t\t\tnode.removeEventListener(ev, callback.handler)\n\t\t\t}\n\t\t},\n\n\t\ttrigger(ev, selectorOrCallback, data) {\n\t\t\tif( selectorOrCallback.constructor === String ) {\n\t\t\t\tArray\n\t\t\t\t\t.from(node.querySelectorAll(selectorOrCallback))\n\t\t\t\t\t.forEach( children => {\n\t\t\t\t\t\tchildren.dispatchEvent(new CustomEvent(ev, { bubbles: true, detail: { args: data } }) )\n\t\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tnode.dispatchEvent(new CustomEvent(ev, { bubbles: true, detail:{ args: data } }))\n\t\t\t}\n\t\t},\n\n\t\temit(ev, data) {\n\t\t\tnode.dispatchEvent(new CustomEvent(ev, { bubbles: true, detail: { args: data } }))\n\t\t},\n\n\t\tunmount( fn ) {\n\t\t\tnode.addEventListener(':unmount', fn)\n\t\t},\n\n\t\tinnerHTML ( target, html_ ) {\n\t\t\tconst element = html_? target : node\n\t\t\tconst clone = element.cloneNode()\n\t\t\tconst html = html_? html_ : target\n\t\t\tclone.innerHTML = html\n\t\t\tIdiomorph.morph(element, clone)\n\t\t}\n\t}\n\n\tconst render = ( data ) => {\n\t\tclearTimeout( tick )\n\t\ttick = setTimeout(() => {\n\t\t\tconst html = tpl.render.call( view(data), node, safe, g )\n\t\t\tIdiomorph.morph( node, html, IdiomorphOptions(node, register) )\n\t\t\tPromise.resolve().then(() => {\n\t\t\t\tnode.querySelectorAll('[tplid]')\n\t\t\t\t\t.forEach((element) => {\n\t\t\t\t\t\tconst child = register.get(element)\n\t\t\t\t\t\tif(!child) return\n\t\t\t\t\t\tchild.state.protected().forEach( key => delete data[key] )\n\t\t\t\t\t\tchild.state.set(data)\n\t\t\t\t\t})\n\t\t\t\tPromise.resolve().then(() => g.scope = {})\n\t\t\t})\n\t\t})\n\t}\n\n\trender( state )\n\tregister.set( node, base )\n\treturn module.default( base )\n}\n\nconst IdiomorphOptions = ( parent, register ) => ({\n\tcallbacks: {\n\t\tbeforeNodeMorphed( node ) {\n\t\t\tif( node.nodeType === 1 ) {\n\t\t\t\tif( 'html-static' in node.attributes ) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tif( register.get(node) && node !== parent ) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})\n","import { Component } from './component'\n\nconst register = new WeakMap()\n\nexport const Element = ({ component, templates, start }) => {\n\n\tconst { name, module, dependencies } = component\n\n\treturn class extends HTMLElement {\n\n\t\tconstructor() {\n\t\t\tsuper()\n\t\t}\n\n\t\tconnectedCallback() {\n\n\t\t\tthis.abortController = new AbortController()\n\n\t\t\tif( !this.getAttribute('tplid') ) {\n\t\t\t\tstart( this.parentNode )\n\t\t\t}\n\n\t\t\tconst rtrn = Component({\n\t\t\t\tnode:this,\n\t\t\t\tname,\n\t\t\t\tmodule,\n\t\t\t\tdependencies,\n\t\t\t\ttemplates,\n\t\t\t\tsignal: this.abortController.signal,\n\t\t\t\tregister\n\t\t\t})\n\n\t\t\tif ( rtrn && rtrn.constructor === Promise ) {\n\t\t\t\trtrn.then(() => {\n\t\t\t\t\tthis.dispatchEvent( new CustomEvent(':mount') )\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tthis.dispatchEvent( new CustomEvent(':mount') )\n\t\t\t}\n\t\t}\n\n\t\tdisconnectedCallback() {\n\t\t\tthis.dispatchEvent( new CustomEvent(':unmount') )\n\t\t\tthis.abortController.abort()\n\t\t}\n\t}\n}\n","import { uuid, decodeHTML } from './utils'\n\nconst templates  = {}\n\nconst config = {\n\ttags: ['{{', '}}']\n}\n\nexport const templateConfig = (newconfig) => {\n\tObject.assign( config, newconfig )\n}\n\nexport const template = ( target, { components }) => {\n\n\ttagElements( target, [...Object.keys( components ), '[html-if]', 'template'] )\n\tconst clone = target.cloneNode( true )\n\n\ttransformTemplate( clone )\n\tremoveTemplateTagsRecursively( clone )\n\tsetTemplates( clone, components )\n\n\treturn templates\n}\n\nexport const compile = ( html ) => {\n\n\tconst parsedHtml = JSON.stringify( html )\n\n\treturn new Function('$element', 'safe', '$g',`\n\t\tvar $data = this;\n\t\twith( $data ){\n\t\t\tvar output=${parsedHtml\n\t\t\t\t.replace(/%%_=(.+?)_%%/g, function(_, variable){\n\t\t\t\t\treturn '\"+safe(function(){return '+ decodeHTML(variable) +';})+\"'\n\t\t\t\t})\n\t\t\t\t.replace(/%%_(.+?)_%%/g, function(_, variable){\n\t\t\t\t\treturn '\";' + decodeHTML(variable) +'\\noutput+=\"'\n\t\t\t\t})};return output;\n\t\t}\n\t`)\n}\n\nconst tagElements = ( target, keys ) => {\n\ttarget\n\t\t.querySelectorAll( keys.toString() )\n\t\t.forEach((node) => {\n\t\t\tif( node.localName === 'template' ) {\n\t\t\t\treturn tagElements( node.content, keys )\n\t\t\t}\n\t\t\tnode.setAttribute('tplid', uuid())\n\t\t\tif( node.getAttribute('html-if') && !node.id ) {\n\t\t\t\tnode.id = uuid()\n\t\t\t}\n\t\t})\n}\n\nconst transformAttributes = ( html ) => {\n\n\tconst regexTags = new RegExp(`\\\\${config.tags[0]}(.+?)\\\\${config.tags[1]}`, 'g')\n\n\treturn html\n\t\t.replace(/jails___scope-id/g, '%%_=$scopeid_%%')\n\t\t.replace(regexTags, '%%_=$1_%%')\n\t\t// Booleans\n\t\t// https://meiert.com/en/blog/boolean-attributes-of-html/\n\t\t.replace(/html-(allowfullscreen|async|autofocus|autoplay|checked|controls|default|defer|disabled|formnovalidate|inert|ismap|itemscope|loop|multiple|muted|nomodule|novalidate|open|playsinline|readonly|required|reversed|selected)=\\\"(.*?)\\\"/g, `%%_if(safe(function(){ return $2 })){_%%$1%%_}_%%`)\n\t\t// The rest\n\t\t.replace(/html-(.*?)=\\\"(.*?)\\\"/g, (all, key, value) => {\n\t\t\tif (key === 'key' || key === 'model' || key === 'scopeid' ) {\n\t\t\t\treturn all\n\t\t\t}\n\t\t\tif (value) {\n\t\t\t\tvalue = value.replace(/^{|}$/g, '')\n\t\t\t\treturn `${key}=\"%%_=safe(function(){ return ${value} })_%%\"`\n\t\t\t} else {\n\t\t\t\treturn all\n\t\t\t}\n\t\t})\n}\n\nconst transformTemplate = ( clone ) => {\n\n\tclone.querySelectorAll('template, [html-for], [html-if], [html-inner], [html-class]')\n\t\t.forEach(( element ) => {\n\n\t\t\tconst htmlFor \t= element.getAttribute('html-for')\n\t\t\tconst htmlIf \t= element.getAttribute('html-if')\n\t\t\tconst htmlInner = element.getAttribute('html-inner')\n\t\t\tconst htmlClass = element.getAttribute('html-class')\n\n\t\t\tif ( htmlFor ) {\n\n\t\t\t\telement.removeAttribute('html-for')\n\n\t\t\t\tconst split \t = htmlFor.match(/(.*)\\sin\\s(.*)/) || ''\n\t\t\t\tconst varname \t = split[1]\n\t\t\t\tconst object \t = split[2]\n\t\t\t\tconst objectname = object.split(/\\./).shift()\n\t\t\t\tconst open \t\t = document.createTextNode(`%%_ ;(function(){ var $index = 0; for(var $key in safe(function(){ return ${object} }) ){ var $scopeid = Math.random().toString(36).substring(2, 9); var ${varname} = ${object}[$key]; $g.scope[$scopeid] = Object.assign({}, { ${objectname}: ${objectname} }, { ${varname} :${varname}, $index: $index, $key: $key }); _%%`)\n\t\t\t\tconst close \t = document.createTextNode(`%%_ $index++; } })() _%%`)\n\n\t\t\t\twrap(open, element, close)\n\t\t\t}\n\n\t\t\tif (htmlIf) {\n\t\t\t\telement.removeAttribute('html-if')\n\t\t\t\tconst open = document.createTextNode(`%%_ if ( safe(function(){ return ${htmlIf} }) ){ _%%`)\n\t\t\t\tconst close = document.createTextNode(`%%_ }  _%%`)\n\t\t\t\twrap(open, element, close)\n\t\t\t}\n\n\t\t\tif (htmlInner) {\n\t\t\t\telement.removeAttribute('html-inner')\n\t\t\t\telement.innerHTML = `%%_=${htmlInner}_%%`\n\t\t\t}\n\n\t\t\tif (htmlClass) {\n\t\t\t\telement.removeAttribute('html-class')\n\t\t\t\telement.className = (element.className + ` %%_=${htmlClass}_%%`).trim()\n\t\t\t}\n\n\t\t\tif( element.localName === 'template' ) {\n\t\t\t\ttransformTemplate(element.content)\n\t\t\t}\n\t\t})\n}\n\nconst setTemplates = ( clone, components ) => {\n\n\tArray.from(clone.querySelectorAll('[tplid]'))\n\t\t.reverse()\n\t\t.forEach((node) => {\n\n\t\t\tconst tplid = node.getAttribute('tplid')\n\t\t\tconst name  = node.localName\n\t\t\tnode.setAttribute('html-scopeid', 'jails___scope-id')\n\n\t\t\tif( name in components && components[name].module.template ) {\n\t\t\t\tconst children = node.innerHTML\n\t\t\t\tconst html = components[name].module.template({ elm:node, children })\n\t\t\t\tnode.innerHTML = html\n\t\t\t}\n\n\t\t\tconst html = transformAttributes(node.outerHTML)\n\n\t\t\ttemplates[ tplid ] = {\n\t\t\t\ttemplate: html,\n\t\t\t\trender\t: compile(html)\n\t\t\t}\n\t\t})\n}\n\nconst removeTemplateTagsRecursively = (node) => {\n\n\t// Get all <template> elements within the node\n\tconst templates = node.querySelectorAll('template')\n\n\ttemplates.forEach((template) => {\n\n\t\tif( template.getAttribute('html-if') || template.getAttribute('html-inner') ) {\n\t\t\treturn\n\t\t}\n\n\t\t// Process any nested <template> tags within this <template> first\n\t\tremoveTemplateTagsRecursively(template.content)\n\n\t\t// Get the parent of the <template> tag\n\t\tconst parent = template.parentNode\n\n\t\tif (parent) {\n\t\t\t// Move all child nodes from the <template>'s content to its parent\n\t\t\tconst content = template.content\n\t\t\twhile (content.firstChild) {\n\t\t\t\tparent.insertBefore(content.firstChild, template)\n\t\t\t}\n\t\t\t// Remove the <template> tag itself\n\t\t\tparent.removeChild(template)\n\t\t}\n\t})\n}\n\nconst wrap = (open, node, close) => {\n\tnode.parentNode?.insertBefore(open, node)\n\tnode.parentNode?.insertBefore(close, node.nextSibling)\n}\n","\nimport { Element } from './element'\nimport { template, templateConfig as config } from './template-system'\n\nconst components = {}\n\nexport { publish, subscribe } from './utils/pubsub'\n\nexport const templateConfig = (options) => {\n\tconfig( options )\n}\n\nexport const register = ( name, module, dependencies ) => {\n\tcomponents[ name ] = { name, module, dependencies }\n}\n\nexport const start = ( target = document.body ) => {\n\n\tconst templates = template( target, { components } )\n\n\tObject\n\t\t.values( components )\n\t\t.forEach(({ name, module, dependencies }) => {\n\t\t\tif( !customElements.get(name) ) {\n\t\t\t\tcustomElements.define( name, Element({ component: { name, module, dependencies }, templates, start }))\n\t\t\t}\n\t})\n}\n"],"names":["config","node","templates","register","Element","start","templateConfig","components","html","template"],"mappings":"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","x_google_ignoreList":[1]}