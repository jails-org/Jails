{"version":3,"file":"jails.js","sources":["../src/utils/index.ts","../src/transpile.ts","../src/template-system.ts","../src/utils/pubsub.ts","../node_modules/idiomorph/dist/idiomorph.esm.js","../src/utils/events.ts","../src/component.ts","../src/element.ts","../src/index.ts","../html.ts"],"sourcesContent":["const textarea = document.createElement('textarea')\n\nexport const decodeHTML = (text) => {\n\ttextarea.innerHTML = text\n\treturn textarea.value\n}\n\nexport const rAF = (fn) => {\n\tif (requestAnimationFrame)\n\t\treturn requestAnimationFrame(fn)\n\telse\n\t\treturn setTimeout(fn, 1000 / 60)\n}\n\nexport const uuid = () => {\n\treturn 'xxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 8 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8)\n\t\treturn v.toString(8)\n\t})\n}\n\nexport const dup = (o) => {\n\treturn JSON.parse(JSON.stringify(o))\n}\n\n// http://crockford.com/javascript/memory/leak.html\nexport const purge = (d) => {\n\tvar a = d.attributes, i, l, n\n\tif (a) {\n\t\tfor (i = a.length - 1; i >= 0; i -= 1) {\n\t\t\tn = a[i].name\n\t\t\tif (typeof d[n] === 'function') {\n\t\t\t\td[n] = null\n\t\t\t}\n\t\t}\n\t}\n\ta = d.childNodes\n\tif (a) {\n\t\tl = a.length\n\t\tfor (i = 0; i < l; i += 1) {\n\t\t\tpurge(d.childNodes[i])\n\t\t}\n\t}\n}\n\nexport const safe = (execute, val) => {\n\ttry{return execute()}catch(err){return val || ''}\n}\n","import { uuid } from './utils'\n\nconst parser = new DOMParser()\n\nexport default function Transpile(html, config) {\n\n\tconst regexTags = new RegExp(`\\\\${config.tags[0]}(.+?)\\\\${config.tags[1]}`, 'g')\n\tconst virtual = parser.parseFromString(html.replace(/<\\/?template[^>]*>/g, ''), 'text/html')\n\n\tvirtual.querySelectorAll('[html-for], [html-if], [html-inner], [html-class], [html-model]').forEach((element) => {\n\n\t\tconst htmlForeach = element.getAttribute('html-foreach')\n\t\tconst htmlFor \t= element.getAttribute('html-for')\n\t\tconst htmlIf \t= element.getAttribute('html-if')\n\t\tconst htmlInner = element.getAttribute('html-inner')\n\t\tconst htmlClass = element.getAttribute('html-class')\n\t\tconst forEachInstruction = htmlFor || htmlForeach\n\n\t\tif ( forEachInstruction ) {\n\t\t\tconst selector = htmlFor? 'html-for': 'html-foreach'\n\t\t\tconst split = forEachInstruction.match(/(.*)\\sin\\s(.*)/) || ''\n\t\t\tconst varname = split[1]\n\t\t\tconst object = split[2]\n\n\t\t\telement.removeAttribute(selector)\n\t\t\telement.setAttribute('scope', '')\n\t\t\tconst script = document.createElement('script')\n\n\t\t\tscript.dataset.scope = ''\n\t\t\tscript.type = 'text/html'\n\t\t\tscript.text = `%%_= $scope _%%`\n\n\t\t\telement.appendChild( script )\n\n\t\t\tconst open = document.createTextNode(`%%_(function(){ var $index = 0; for(var $key in safe(function(){ return ${object} }) ){ var ${varname} = ${object}[$key]; var $scope = JSON.stringify({ '${varname}':${varname}, $index: $index, $key:$key }); _%%`)\n\t\t\tconst close = document.createTextNode(`%%_ $index++; } })() _%%`)\n\t\t\twrap(open, element, close)\n\t\t}\n\t\tif (htmlIf) {\n\t\t\telement.removeAttribute('html-if')\n\t\t\tconst open = document.createTextNode(`%%_ if ( safe(function(){ return ${htmlIf} }) ){ _%%`)\n\t\t\tconst close = document.createTextNode(`%%_ } _%%`)\n\t\t\twrap(open, element, close)\n\t\t\tif(!element.id) {\n\t\t\t\telement.setAttribute('id', `tplifid-${uuid()}`)\n\t\t\t}\n\t\t}\n\t\tif (htmlInner) {\n\t\t\telement.removeAttribute('html-inner')\n\t\t\telement.innerHTML = `%%_=${htmlInner}_%%`\n\t\t}\n\t\tif (htmlClass) {\n\t\t\telement.removeAttribute('html-class')\n\t\t\telement.className = (element.className + ` %%_=${htmlClass}_%%`).trim()\n\t\t}\n\t})\n\n\treturn (\n\t\tvirtual.body.innerHTML\n\t\t\t.replace(regexTags, '%%_=$1_%%')\n\t\t\t// Booleans\n\t\t\t// https://meiert.com/en/blog/boolean-attributes-of-html/\n\t\t\t.replace(/html-(allowfullscreen|async|autofocus|autoplay|checked|controls|default|defer|disabled|formnovalidate|inert|ismap|itemscope|loop|multiple|muted|nomodule|novalidate|open|playsinline|readonly|required|reversed|selected)=\\\"(.*?)\\\"/g, `%%_if(safe(function(){ return $2 })){_%%$1%%_}_%%`)\n\t\t\t// The rest\n\t\t\t.replace(/html-(.*?)=\\\"(.*?)\\\"/g, (all, key, value) => {\n\t\t\t\tif (key === 'key' || key === 'model' || key == 'scope') {\n\t\t\t\t\treturn all\n\t\t\t\t}\n\t\t\t\tif (value) {\n\t\t\t\t\tvalue = value.replace(/^{|}$/g, '')\n\t\t\t\t\treturn `${key}=\"%%_=safe(function(){ return ${value} })_%%\"`\n\t\t\t\t} else {\n\t\t\t\t\treturn all\n\t\t\t\t}\n\t\t\t})\n\t)\n}\n\nconst wrap = (open, node, close) => {\n\tnode.parentNode?.insertBefore(open, node)\n\tnode.parentNode?.insertBefore(close, node.nextSibling)\n}\n","import Transpile from './transpile'\nimport { uuid, decodeHTML } from './utils'\n\nconst config = {\n\ttags: ['${', '}']\n}\n\nexport const templateConfig = (newconfig) => {\n\tObject.assign(config, newconfig)\n}\n\nexport default function Template(element) {\n\n\tconst html = Transpile(element.outerHTML, config)\n\tconst decodedHTML  = JSON.stringify(html)\n\n\treturn new Function('$element', 'safe',`\n\t\tvar $data = this;\n\t\twith( $data ){\n\t\t\tvar output=${decodedHTML\n\t\t\t\t.replace(/%%_=(.+?)_%%/g, function(_, variable){\n\t\t\t\t\treturn '\"+safe(function(){return '+decodeHTML(variable)+';})+\"'\n\t\t\t\t})\n\t\t\t\t.replace(/%%_(.+?)_%%/g, function(_, variable){\n\t\t\t\t\treturn '\";' + decodeHTML(variable) +'\\noutput+=\"'\n\t\t\t\t})};return output;\n\t\t}\n\t`)\n}\n\nexport const buildtemplates = ( target, selector, templates, components ) => {\n\t[]\n\t\t.concat( target.matches? (target.matches(selector)? target : []) : [] )\n\t\t.concat( Array.from(target.querySelectorAll( selector )) )\n\t\t.reverse()\n\t\t.forEach( (node:HTMLElement) => {\n\t\t\tnode.querySelectorAll('template').forEach( template => buildtemplates(template.content, selector, templates, components ))\n\t\t\tcreateTemplateId(node, templates, components)\n\t\t})\n}\n\nconst createTemplateId = (element, templates, components ) => {\n\n\tconst tplid = element.getAttribute('tplid')\n\n\tif (!tplid) {\n\t\tconst id = uuid()\n\t\telement.setAttribute('tplid', id)\n\t\tconst name = element.localName\n\n\t\tif( name in components && components[name].module.template ) {\n\t\t\tconst children = element.innerHTML\n\t\t\tconst html = components[name].module.template({ children })\n\t\t\tif( html.constructor === Promise ) {\n\t\t\t\telement.__template = html\n\t\t\t\thtml.then( htmlstring => {\n\t\t\t\t\telement.innerHTML = htmlstring\n\t\t\t\t\ttemplates[id] = Template(element)\n\t\t\t\t})\n\t\t\t}else {\n\t\t\t\telement.innerHTML = html\n\t\t\t}\n\t\t}\n\t\ttemplates[id] = Template(element)\n\t}\n}\n\n","const topics: any = {}\nconst _async: any = {}\n\nexport const publish = (name, params) => {\n\t_async[name] = Object.assign({}, _async[name], params)\n\tif (topics[name])\n\t\ttopics[name].forEach(topic => topic(params))\n}\n\nexport const subscribe = (name, method) => {\n\ttopics[name] = topics[name] || []\n\ttopics[name].push(method)\n\tif (name in _async) {\n\t\tmethod(_async[name])\n\t}\n\treturn () => {\n\t\ttopics[name] = topics[name].filter( fn => fn != method )\n\t}\n}\n\n","/**\n * @typedef {object} ConfigHead\n *\n * @property {'merge' | 'append' | 'morph' | 'none'} [style]\n * @property {boolean} [block]\n * @property {boolean} [ignore]\n * @property {function(Element): boolean} [shouldPreserve]\n * @property {function(Element): boolean} [shouldReAppend]\n * @property {function(Element): boolean} [shouldRemove]\n * @property {function(Element, {added: Node[], kept: Element[], removed: Element[]}): void} [afterHeadMorphed]\n */\n\n/**\n * @typedef {object} ConfigCallbacks\n *\n * @property {function(Node): boolean} [beforeNodeAdded]\n * @property {function(Node): void} [afterNodeAdded]\n * @property {function(Element, Node): boolean} [beforeNodeMorphed]\n * @property {function(Element, Node): void} [afterNodeMorphed]\n * @property {function(Element): boolean} [beforeNodeRemoved]\n * @property {function(Element): void} [afterNodeRemoved]\n * @property {function(string, Element, \"update\" | \"remove\"): boolean} [beforeAttributeUpdated]\n * @property {function(Element): boolean} [beforeNodePantried]\n */\n\n/**\n * @typedef {object} Config\n *\n * @property {'outerHTML' | 'innerHTML'} [morphStyle]\n * @property {boolean} [ignoreActive]\n * @property {boolean} [ignoreActiveValue]\n * @property {ConfigCallbacks} [callbacks]\n * @property {ConfigHead} [head]\n */\n\n/**\n * @typedef {function} NoOp\n *\n * @returns {void}\n */\n\n/**\n * @typedef {object} ConfigHeadInternal\n *\n * @property {'merge' | 'append' | 'morph' | 'none'} style\n * @property {boolean} [block]\n * @property {boolean} [ignore]\n * @property {(function(Element): boolean) | NoOp} shouldPreserve\n * @property {(function(Element): boolean) | NoOp} shouldReAppend\n * @property {(function(Element): boolean) | NoOp} shouldRemove\n * @property {(function(Element, {added: Node[], kept: Element[], removed: Element[]}): void) | NoOp} afterHeadMorphed\n */\n\n/**\n * @typedef {object} ConfigCallbacksInternal\n *\n * @property {(function(Node): boolean) | NoOp} beforeNodeAdded\n * @property {(function(Node): void) | NoOp} afterNodeAdded\n * @property {(function(Node, Node): boolean) | NoOp} beforeNodeMorphed\n * @property {(function(Node, Node): void) | NoOp} afterNodeMorphed\n * @property {(function(Node): boolean) | NoOp} beforeNodeRemoved\n * @property {(function(Node): void) | NoOp} afterNodeRemoved\n * @property {(function(string, Element, \"update\" | \"remove\"): boolean) | NoOp} beforeAttributeUpdated\n * @property {(function(Node): boolean) | NoOp} beforeNodePantried\n */\n\n/**\n * @typedef {object} ConfigInternal\n *\n * @property {'outerHTML' | 'innerHTML'} morphStyle\n * @property {boolean} [ignoreActive]\n * @property {boolean} [ignoreActiveValue]\n * @property {ConfigCallbacksInternal} callbacks\n * @property {ConfigHeadInternal} head\n * @property {boolean} [twoPass]\n */\n\n/**\n * @typedef {Function} Morph\n *\n * @param {Element | Document} oldNode\n * @param {Element | Node | HTMLCollection | Node[] | string | null} newContent\n * @param {Config} [config]\n * @returns {undefined | Node[]}\n */\n\n// base IIFE to define idiomorph\n/**\n *\n * @type {{defaults: ConfigInternal, morph: Morph}}\n */\nvar Idiomorph = (function () {\n  \"use strict\";\n\n  /**\n   * @typedef {object} MorphContext\n   *\n   * @property {Node} target\n   * @property {Node} newContent\n   * @property {ConfigInternal} config\n   * @property {ConfigInternal['morphStyle']} morphStyle\n   * @property {ConfigInternal['ignoreActive']} ignoreActive\n   * @property {ConfigInternal['ignoreActiveValue']} ignoreActiveValue\n   * @property {Map<Node, Set<string>>} idMap\n   * @property {Set<string>} persistentIds\n   * @property {Set<string>} deadIds\n   * @property {ConfigInternal['callbacks']} callbacks\n   * @property {ConfigInternal['head']} head\n   * @property {HTMLDivElement} pantry\n   */\n\n  //=============================================================================\n  // AND NOW IT BEGINS...\n  //=============================================================================\n\n  /**\n   *\n   * @type {Set<string>}\n   */\n  let EMPTY_SET = new Set();\n\n  /**\n   * Default configuration values, updatable by users now\n   * @type {ConfigInternal}\n   */\n  let defaults = {\n    morphStyle: \"outerHTML\",\n    callbacks: {\n      beforeNodeAdded: noOp,\n      afterNodeAdded: noOp,\n      beforeNodeMorphed: noOp,\n      afterNodeMorphed: noOp,\n      beforeNodeRemoved: noOp,\n      afterNodeRemoved: noOp,\n      beforeAttributeUpdated: noOp,\n      beforeNodePantried: noOp,\n    },\n    head: {\n      style: \"merge\",\n      shouldPreserve: function (elt) {\n        return elt.getAttribute(\"im-preserve\") === \"true\";\n      },\n      shouldReAppend: function (elt) {\n        return elt.getAttribute(\"im-re-append\") === \"true\";\n      },\n      shouldRemove: noOp,\n      afterHeadMorphed: noOp,\n    },\n  };\n\n  /**\n   * =============================================================================\n   * Core Morphing Algorithm - morph, morphNormalizedContent, morphOldNodeTo, morphChildren\n   * =============================================================================\n   *\n   * @param {Element | Document} oldNode\n   * @param {Element | Node | HTMLCollection | Node[] | string | null} newContent\n   * @param {Config} [config]\n   * @returns {undefined | Node[]}\n   */\n  function morph(oldNode, newContent, config = {}) {\n    if (oldNode instanceof Document) {\n      oldNode = oldNode.documentElement;\n    }\n\n    if (typeof newContent === \"string\") {\n      newContent = parseContent(newContent);\n    }\n\n    let normalizedContent = normalizeContent(newContent);\n\n    let ctx = createMorphContext(oldNode, normalizedContent, config);\n\n    return morphNormalizedContent(oldNode, normalizedContent, ctx);\n  }\n\n  /**\n   *\n   * @param {Element} oldNode\n   * @param {Element} normalizedNewContent\n   * @param {MorphContext} ctx\n   * @returns {undefined | Node[]}\n   */\n  function morphNormalizedContent(oldNode, normalizedNewContent, ctx) {\n    if (ctx.head.block) {\n      let oldHead = oldNode.querySelector(\"head\");\n      let newHead = normalizedNewContent.querySelector(\"head\");\n      if (oldHead && newHead) {\n        let promises = handleHeadElement(newHead, oldHead, ctx);\n        // when head promises resolve, call morph again, ignoring the head tag\n        Promise.all(promises).then(function () {\n          morphNormalizedContent(\n            oldNode,\n            normalizedNewContent,\n            Object.assign(ctx, {\n              head: {\n                block: false,\n                ignore: true,\n              },\n            }),\n          );\n        });\n        return;\n      }\n    }\n\n    if (ctx.morphStyle === \"innerHTML\") {\n      // innerHTML, so we are only updating the children\n      morphChildren(normalizedNewContent, oldNode, ctx);\n      if (ctx.config.twoPass) {\n        restoreFromPantry(oldNode, ctx);\n      }\n      return Array.from(oldNode.children);\n    } else if (ctx.morphStyle === \"outerHTML\" || ctx.morphStyle == null) {\n      // otherwise find the best element match in the new content, morph that, and merge its siblings\n      // into either side of the best match\n      let bestMatch = findBestNodeMatch(normalizedNewContent, oldNode, ctx);\n\n      // stash the siblings that will need to be inserted on either side of the best match\n      let previousSibling = bestMatch?.previousSibling ?? null;\n      let nextSibling = bestMatch?.nextSibling ?? null;\n\n      // morph it\n      let morphedNode = morphOldNodeTo(oldNode, bestMatch, ctx);\n\n      if (bestMatch) {\n        // if there was a best match, merge the siblings in too and return the\n        // whole bunch\n        if (morphedNode) {\n          const elements = insertSiblings(\n            previousSibling,\n            morphedNode,\n            nextSibling,\n          );\n          if (ctx.config.twoPass) {\n            restoreFromPantry(morphedNode.parentNode, ctx);\n          }\n          return elements;\n        }\n      } else {\n        // otherwise nothing was added to the DOM\n        return [];\n      }\n    } else {\n      throw \"Do not understand how to morph style \" + ctx.morphStyle;\n    }\n  }\n\n  /**\n   * @param {Node} possibleActiveElement\n   * @param {MorphContext} ctx\n   * @returns {boolean}\n   */\n  // TODO: ignoreActive and ignoreActiveValue are marked as optional since they are not\n  //   initialised in the default config object. As a result the && in the function body may\n  //   return undefined instead of boolean. Either expand the type of the return value to\n  //   include undefined or wrap the ctx.ignoreActiveValue into a Boolean()\n  function ignoreValueOfActiveElement(possibleActiveElement, ctx) {\n    return (\n      !!ctx.ignoreActiveValue &&\n      possibleActiveElement === document.activeElement &&\n      possibleActiveElement !== document.body\n    );\n  }\n\n  /**\n   * @param {Node} oldNode root node to merge content into\n   * @param {Node | null} newContent new content to merge\n   * @param {MorphContext} ctx the merge context\n   * @returns {Node | null} the element that ended up in the DOM\n   */\n  function morphOldNodeTo(oldNode, newContent, ctx) {\n    if (ctx.ignoreActive && oldNode === document.activeElement) {\n      // don't morph focused element\n    } else if (newContent == null) {\n      if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n\n      oldNode.parentNode?.removeChild(oldNode);\n      ctx.callbacks.afterNodeRemoved(oldNode);\n      return null;\n    } else if (!isSoftMatch(oldNode, newContent)) {\n      if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n      if (ctx.callbacks.beforeNodeAdded(newContent) === false) return oldNode;\n\n      oldNode.parentNode?.replaceChild(newContent, oldNode);\n      ctx.callbacks.afterNodeAdded(newContent);\n      ctx.callbacks.afterNodeRemoved(oldNode);\n      return newContent;\n    } else {\n      if (ctx.callbacks.beforeNodeMorphed(oldNode, newContent) === false)\n        return oldNode;\n\n      if (oldNode instanceof HTMLHeadElement && ctx.head.ignore) {\n        // ignore the head element\n      } else if (\n        oldNode instanceof HTMLHeadElement &&\n        ctx.head.style !== \"morph\"\n      ) {\n        // ok to cast: if newContent wasn't also a <head>, it would've got caught in the `!isSoftMatch` branch above\n        handleHeadElement(\n          /** @type {HTMLHeadElement} */ (newContent),\n          oldNode,\n          ctx,\n        );\n      } else {\n        syncNodeFrom(newContent, oldNode, ctx);\n        if (!ignoreValueOfActiveElement(oldNode, ctx)) {\n          morphChildren(newContent, oldNode, ctx);\n        }\n      }\n      ctx.callbacks.afterNodeMorphed(oldNode, newContent);\n      return oldNode;\n    }\n    return null;\n  }\n\n  /**\n   * This is the core algorithm for matching up children.  The idea is to use id sets to try to match up\n   * nodes as faithfully as possible.  We greedily match, which allows us to keep the algorithm fast, but\n   * by using id sets, we are able to better match up with content deeper in the DOM.\n   *\n   * Basic algorithm is, for each node in the new content:\n   *\n   * - if we have reached the end of the old parent, append the new content\n   * - if the new content has an id set match with the current insertion point, morph\n   * - search for an id set match\n   * - if id set match found, morph\n   * - otherwise search for a \"soft\" match\n   * - if a soft match is found, morph\n   * - otherwise, prepend the new node before the current insertion point\n   *\n   * The two search algorithms terminate if competing node matches appear to outweigh what can be achieved\n   * with the current node.  See findIdSetMatch() and findSoftMatch() for details.\n   *\n   * @param {Node} newParent the parent element of the new content\n   * @param {Node} oldParent the old content that we are merging the new content into\n   * @param {MorphContext} ctx the merge context\n   * @returns {void}\n   */\n  function morphChildren(newParent, oldParent, ctx) {\n    if (\n      newParent instanceof HTMLTemplateElement &&\n      oldParent instanceof HTMLTemplateElement\n    ) {\n      newParent = newParent.content;\n      oldParent = oldParent.content;\n    }\n\n    /**\n     *\n     * @type {Node | null}\n     */\n    let nextNewChild = newParent.firstChild;\n    /**\n     *\n     * @type {Node | null}\n     */\n    let insertionPoint = oldParent.firstChild;\n    let newChild;\n\n    // run through all the new content\n    while (nextNewChild) {\n      newChild = nextNewChild;\n      nextNewChild = newChild.nextSibling;\n\n      // if we are at the end of the exiting parent's children, just append\n      if (insertionPoint == null) {\n        // skip add callbacks when we're going to be restoring this from the pantry in the second pass\n        if (\n          ctx.config.twoPass &&\n          ctx.persistentIds.has(/** @type {Element} */ (newChild).id)\n        ) {\n          oldParent.appendChild(newChild);\n        } else {\n          if (ctx.callbacks.beforeNodeAdded(newChild) === false) continue;\n          oldParent.appendChild(newChild);\n          ctx.callbacks.afterNodeAdded(newChild);\n        }\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // if the current node has an id set match then morph\n      if (isIdSetMatch(newChild, insertionPoint, ctx)) {\n        morphOldNodeTo(insertionPoint, newChild, ctx);\n        insertionPoint = insertionPoint.nextSibling;\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // otherwise search forward in the existing old children for an id set match\n      let idSetMatch = findIdSetMatch(\n        newParent,\n        oldParent,\n        newChild,\n        insertionPoint,\n        ctx,\n      );\n\n      // if we found a potential match, remove the nodes until that point and morph\n      if (idSetMatch) {\n        insertionPoint = removeNodesBetween(insertionPoint, idSetMatch, ctx);\n        morphOldNodeTo(idSetMatch, newChild, ctx);\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // no id set match found, so scan forward for a soft match for the current node\n      let softMatch = findSoftMatch(\n        newParent,\n        oldParent,\n        newChild,\n        insertionPoint,\n        ctx,\n      );\n\n      // if we found a soft match for the current node, morph\n      if (softMatch) {\n        insertionPoint = removeNodesBetween(insertionPoint, softMatch, ctx);\n        morphOldNodeTo(softMatch, newChild, ctx);\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // abandon all hope of morphing, just insert the new child before the insertion point\n      // and move on\n\n      // skip add callbacks when we're going to be restoring this from the pantry in the second pass\n      if (\n        ctx.config.twoPass &&\n        ctx.persistentIds.has(/** @type {Element} */ (newChild).id)\n      ) {\n        oldParent.insertBefore(newChild, insertionPoint);\n      } else {\n        if (ctx.callbacks.beforeNodeAdded(newChild) === false) continue;\n        oldParent.insertBefore(newChild, insertionPoint);\n        ctx.callbacks.afterNodeAdded(newChild);\n      }\n      removeIdsFromConsideration(ctx, newChild);\n    }\n\n    // remove any remaining old nodes that didn't match up with new content\n    while (insertionPoint !== null) {\n      let tempNode = insertionPoint;\n      insertionPoint = insertionPoint.nextSibling;\n      removeNode(tempNode, ctx);\n    }\n  }\n\n  //=============================================================================\n  // Attribute Syncing Code\n  //=============================================================================\n\n  /**\n   * @param {string} attr the attribute to be mutated\n   * @param {Element} to the element that is going to be updated\n   * @param {\"update\" | \"remove\"} updateType\n   * @param {MorphContext} ctx the merge context\n   * @returns {boolean} true if the attribute should be ignored, false otherwise\n   */\n  function ignoreAttribute(attr, to, updateType, ctx) {\n    if (\n      attr === \"value\" &&\n      ctx.ignoreActiveValue &&\n      to === document.activeElement\n    ) {\n      return true;\n    }\n    return ctx.callbacks.beforeAttributeUpdated(attr, to, updateType) === false;\n  }\n\n  /**\n   * syncs a given node with another node, copying over all attributes and\n   * inner element state from the 'from' node to the 'to' node\n   *\n   * @param {Node} from the element to copy attributes & state from\n   * @param {Node} to the element to copy attributes & state to\n   * @param {MorphContext} ctx the merge context\n   */\n  function syncNodeFrom(from, to, ctx) {\n    let type = from.nodeType;\n\n    // if is an element type, sync the attributes from the\n    // new node into the new node\n    if (type === 1 /* element type */) {\n      const fromEl = /** @type {Element} */ (from);\n      const toEl = /** @type {Element} */ (to);\n      const fromAttributes = fromEl.attributes;\n      const toAttributes = toEl.attributes;\n      for (const fromAttribute of fromAttributes) {\n        if (ignoreAttribute(fromAttribute.name, toEl, \"update\", ctx)) {\n          continue;\n        }\n        if (toEl.getAttribute(fromAttribute.name) !== fromAttribute.value) {\n          toEl.setAttribute(fromAttribute.name, fromAttribute.value);\n        }\n      }\n      // iterate backwards to avoid skipping over items when a delete occurs\n      for (let i = toAttributes.length - 1; 0 <= i; i--) {\n        const toAttribute = toAttributes[i];\n\n        // toAttributes is a live NamedNodeMap, so iteration+mutation is unsafe\n        // e.g. custom element attribute callbacks can remove other attributes\n        if (!toAttribute) continue;\n\n        if (!fromEl.hasAttribute(toAttribute.name)) {\n          if (ignoreAttribute(toAttribute.name, toEl, \"remove\", ctx)) {\n            continue;\n          }\n          toEl.removeAttribute(toAttribute.name);\n        }\n      }\n    }\n\n    // sync text nodes\n    if (type === 8 /* comment */ || type === 3 /* text */) {\n      if (to.nodeValue !== from.nodeValue) {\n        to.nodeValue = from.nodeValue;\n      }\n    }\n\n    if (!ignoreValueOfActiveElement(to, ctx)) {\n      // sync input values\n      syncInputValue(from, to, ctx);\n    }\n  }\n\n  /**\n   * @param {Element} from element to sync the value from\n   * @param {Element} to element to sync the value to\n   * @param {string} attributeName the attribute name\n   * @param {MorphContext} ctx the merge context\n   */\n  function syncBooleanAttribute(from, to, attributeName, ctx) {\n    // TODO: prefer set/getAttribute here\n    if (!(from instanceof Element && to instanceof Element)) return;\n    // @ts-ignore this function is only used on boolean attrs that are reflected as dom properties\n    const fromLiveValue = from[attributeName],\n      toLiveValue = to[attributeName];\n    if (fromLiveValue !== toLiveValue) {\n      let ignoreUpdate = ignoreAttribute(attributeName, to, \"update\", ctx);\n      if (!ignoreUpdate) {\n        // update attribute's associated DOM property\n        // @ts-ignore this function is only used on boolean attrs that are reflected as dom properties\n        to[attributeName] = from[attributeName];\n      }\n      if (fromLiveValue) {\n        if (!ignoreUpdate) {\n          // TODO: do we really want this? tests say so but it feels wrong\n          to.setAttribute(attributeName, fromLiveValue);\n        }\n      } else {\n        if (!ignoreAttribute(attributeName, to, \"remove\", ctx)) {\n          to.removeAttribute(attributeName);\n        }\n      }\n    }\n  }\n\n  /**\n   * NB: many bothans died to bring us information:\n   *\n   *  https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js\n   *  https://github.com/choojs/nanomorph/blob/master/lib/morph.jsL113\n   *\n   * @param {Node} from the element to sync the input value from\n   * @param {Node} to the element to sync the input value to\n   * @param {MorphContext} ctx the merge context\n   */\n  function syncInputValue(from, to, ctx) {\n    if (\n      from instanceof HTMLInputElement &&\n      to instanceof HTMLInputElement &&\n      from.type !== \"file\"\n    ) {\n      let fromValue = from.value;\n      let toValue = to.value;\n\n      // sync boolean attributes\n      syncBooleanAttribute(from, to, \"checked\", ctx);\n      syncBooleanAttribute(from, to, \"disabled\", ctx);\n\n      if (!from.hasAttribute(\"value\")) {\n        if (!ignoreAttribute(\"value\", to, \"remove\", ctx)) {\n          to.value = \"\";\n          to.removeAttribute(\"value\");\n        }\n      } else if (fromValue !== toValue) {\n        if (!ignoreAttribute(\"value\", to, \"update\", ctx)) {\n          to.setAttribute(\"value\", fromValue);\n          to.value = fromValue;\n        }\n      }\n      // TODO: QUESTION(1cg): this used to only check `from` unlike the other branches -- why?\n      // did I break something?\n    } else if (\n      from instanceof HTMLOptionElement &&\n      to instanceof HTMLOptionElement\n    ) {\n      syncBooleanAttribute(from, to, \"selected\", ctx);\n    } else if (\n      from instanceof HTMLTextAreaElement &&\n      to instanceof HTMLTextAreaElement\n    ) {\n      let fromValue = from.value;\n      let toValue = to.value;\n      if (ignoreAttribute(\"value\", to, \"update\", ctx)) {\n        return;\n      }\n      if (fromValue !== toValue) {\n        to.value = fromValue;\n      }\n      if (to.firstChild && to.firstChild.nodeValue !== fromValue) {\n        to.firstChild.nodeValue = fromValue;\n      }\n    }\n  }\n\n  /**\n   * =============================================================================\n   *  The HEAD tag can be handled specially, either w/ a 'merge' or 'append' style\n   * =============================================================================\n   * @param {Element} newHeadTag\n   * @param {Element} currentHead\n   * @param {MorphContext} ctx\n   * @returns {Promise<void>[]}\n   */\n  function handleHeadElement(newHeadTag, currentHead, ctx) {\n    /**\n     * @type {Node[]}\n     */\n    let added = [];\n    /**\n     * @type {Element[]}\n     */\n    let removed = [];\n    /**\n     * @type {Element[]}\n     */\n    let preserved = [];\n    /**\n     * @type {Element[]}\n     */\n    let nodesToAppend = [];\n\n    let headMergeStyle = ctx.head.style;\n\n    // put all new head elements into a Map, by their outerHTML\n    let srcToNewHeadNodes = new Map();\n    for (const newHeadChild of newHeadTag.children) {\n      srcToNewHeadNodes.set(newHeadChild.outerHTML, newHeadChild);\n    }\n\n    // for each elt in the current head\n    for (const currentHeadElt of currentHead.children) {\n      // If the current head element is in the map\n      let inNewContent = srcToNewHeadNodes.has(currentHeadElt.outerHTML);\n      let isReAppended = ctx.head.shouldReAppend(currentHeadElt);\n      let isPreserved = ctx.head.shouldPreserve(currentHeadElt);\n      if (inNewContent || isPreserved) {\n        if (isReAppended) {\n          // remove the current version and let the new version replace it and re-execute\n          removed.push(currentHeadElt);\n        } else {\n          // this element already exists and should not be re-appended, so remove it from\n          // the new content map, preserving it in the DOM\n          srcToNewHeadNodes.delete(currentHeadElt.outerHTML);\n          preserved.push(currentHeadElt);\n        }\n      } else {\n        if (headMergeStyle === \"append\") {\n          // we are appending and this existing element is not new content\n          // so if and only if it is marked for re-append do we do anything\n          if (isReAppended) {\n            removed.push(currentHeadElt);\n            nodesToAppend.push(currentHeadElt);\n          }\n        } else {\n          // if this is a merge, we remove this content since it is not in the new head\n          if (ctx.head.shouldRemove(currentHeadElt) !== false) {\n            removed.push(currentHeadElt);\n          }\n        }\n      }\n    }\n\n    // Push the remaining new head elements in the Map into the\n    // nodes to append to the head tag\n    nodesToAppend.push(...srcToNewHeadNodes.values());\n    log(\"to append: \", nodesToAppend);\n\n    let promises = [];\n    for (const newNode of nodesToAppend) {\n      log(\"adding: \", newNode);\n      // TODO: This could theoretically be null, based on type\n      let newElt = /** @type {ChildNode} */ (\n        document.createRange().createContextualFragment(newNode.outerHTML)\n          .firstChild\n      );\n      log(newElt);\n      if (ctx.callbacks.beforeNodeAdded(newElt) !== false) {\n        if (\n          (\"href\" in newElt && newElt.href) ||\n          (\"src\" in newElt && newElt.src)\n        ) {\n          /** @type {(result?: any) => void} */ let resolve;\n          let promise = new Promise(function (_resolve) {\n            resolve = _resolve;\n          });\n          newElt.addEventListener(\"load\", function () {\n            resolve();\n          });\n          promises.push(promise);\n        }\n        currentHead.appendChild(newElt);\n        ctx.callbacks.afterNodeAdded(newElt);\n        added.push(newElt);\n      }\n    }\n\n    // remove all removed elements, after we have appended the new elements to avoid\n    // additional network requests for things like style sheets\n    for (const removedElement of removed) {\n      if (ctx.callbacks.beforeNodeRemoved(removedElement) !== false) {\n        currentHead.removeChild(removedElement);\n        ctx.callbacks.afterNodeRemoved(removedElement);\n      }\n    }\n\n    ctx.head.afterHeadMorphed(currentHead, {\n      added: added,\n      kept: preserved,\n      removed: removed,\n    });\n    return promises;\n  }\n\n  //=============================================================================\n  // Misc\n  //=============================================================================\n\n  /**\n   * @param {any[]} _args\n   */\n  function log(..._args) {\n    //console.log(args);\n  }\n\n  function noOp() {}\n\n  /**\n   * Deep merges the config object and the Idiomoroph.defaults object to\n   * produce a final configuration object\n   * @param {Config} config\n   * @returns {ConfigInternal}\n   */\n  function mergeDefaults(config) {\n    /**\n     * @type {ConfigInternal}\n     */\n    let finalConfig = Object.assign({}, defaults);\n\n    // copy top level stuff into final config\n    Object.assign(finalConfig, config);\n\n    // copy callbacks into final config (do this to deep merge the callbacks)\n    finalConfig.callbacks = Object.assign(\n      {},\n      defaults.callbacks,\n      config.callbacks,\n    );\n\n    // copy head config into final config  (do this to deep merge the head)\n    finalConfig.head = Object.assign({}, defaults.head, config.head);\n\n    return finalConfig;\n  }\n\n  /**\n   *\n   * @param {Element} oldNode\n   * @param {Element} newContent\n   * @param {Config} config\n   * @returns {MorphContext}\n   */\n  function createMorphContext(oldNode, newContent, config) {\n    const mergedConfig = mergeDefaults(config);\n    return {\n      target: oldNode,\n      newContent: newContent,\n      config: mergedConfig,\n      morphStyle: mergedConfig.morphStyle,\n      ignoreActive: mergedConfig.ignoreActive,\n      ignoreActiveValue: mergedConfig.ignoreActiveValue,\n      idMap: createIdMap(oldNode, newContent),\n      deadIds: new Set(),\n      persistentIds: mergedConfig.twoPass\n        ? createPersistentIds(oldNode, newContent)\n        : new Set(),\n      pantry: mergedConfig.twoPass\n        ? createPantry()\n        : document.createElement(\"div\"),\n      callbacks: mergedConfig.callbacks,\n      head: mergedConfig.head,\n    };\n  }\n\n  function createPantry() {\n    const pantry = document.createElement(\"div\");\n    pantry.hidden = true;\n    document.body.insertAdjacentElement(\"afterend\", pantry);\n    return pantry;\n  }\n\n  /**\n   *\n   * @param {Node | null} node1\n   * @param {Node | null} node2\n   * @param {MorphContext} ctx\n   * @returns {boolean}\n   */\n  // TODO: The function handles this as if it's Element or null, but the function is called in\n  //   places where the arguments may be just a Node, not an Element\n  function isIdSetMatch(node1, node2, ctx) {\n    if (node1 == null || node2 == null) {\n      return false;\n    }\n    if (\n      node1 instanceof Element &&\n      node2 instanceof Element &&\n      node1.tagName === node2.tagName\n    ) {\n      if (node1.id !== \"\" && node1.id === node2.id) {\n        return true;\n      } else {\n        return getIdIntersectionCount(ctx, node1, node2) > 0;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param {Node | null} oldNode\n   * @param {Node | null} newNode\n   * @returns {boolean}\n   */\n  function isSoftMatch(oldNode, newNode) {\n    if (oldNode == null || newNode == null) {\n      return false;\n    }\n    // ok to cast: if one is not element, `id` or `tagName` will be undefined and we'll compare that\n    // If oldNode has an `id` with possible state and it doesn't match newNode.id then avoid morphing\n    if (\n      /** @type {Element} */ (oldNode).id &&\n      /** @type {Element} */ (oldNode).id !==\n        /** @type {Element} */ (newNode).id\n    ) {\n      return false;\n    }\n    return (\n      oldNode.nodeType === newNode.nodeType &&\n      /** @type {Element} */ (oldNode).tagName ===\n        /** @type {Element} */ (newNode).tagName\n    );\n  }\n\n  /**\n   *\n   * @param {Node} startInclusive\n   * @param {Node} endExclusive\n   * @param {MorphContext} ctx\n   * @returns {Node | null}\n   */\n  function removeNodesBetween(startInclusive, endExclusive, ctx) {\n    /** @type {Node | null} */ let cursor = startInclusive;\n    while (cursor !== endExclusive) {\n      let tempNode = /** @type {Node} */ (cursor);\n      // TODO: Prefer assigning to a new variable here or expand the type of startInclusive\n      //  to be Node | null\n      cursor = tempNode.nextSibling;\n      removeNode(tempNode, ctx);\n    }\n    removeIdsFromConsideration(ctx, endExclusive);\n    return endExclusive.nextSibling;\n  }\n\n  /**\n   * =============================================================================\n   *  Scans forward from the insertionPoint in the old parent looking for a potential id match\n   *  for the newChild.  We stop if we find a potential id match for the new child OR\n   *  if the number of potential id matches we are discarding is greater than the\n   *  potential id matches for the new child\n   * =============================================================================\n   * @param {Node} newContent\n   * @param {Node} oldParent\n   * @param {Node} newChild\n   * @param {Node} insertionPoint\n   * @param {MorphContext} ctx\n   * @returns {null | Node}\n   */\n  function findIdSetMatch(\n    newContent,\n    oldParent,\n    newChild,\n    insertionPoint,\n    ctx,\n  ) {\n    // max id matches we are willing to discard in our search\n    let newChildPotentialIdCount = getIdIntersectionCount(\n      ctx,\n      newChild,\n      oldParent,\n    );\n\n    /**\n     * @type {Node | null}\n     */\n    let potentialMatch = null;\n\n    // only search forward if there is a possibility of an id match\n    if (newChildPotentialIdCount > 0) {\n      // TODO: This is ghosting the potentialMatch variable outside of this block.\n      //   Probably an error\n      potentialMatch = insertionPoint;\n      // if there is a possibility of an id match, scan forward\n      // keep track of the potential id match count we are discarding (the\n      // newChildPotentialIdCount must be greater than this to make it likely\n      // worth it)\n      let otherMatchCount = 0;\n      while (potentialMatch != null) {\n        // If we have an id match, return the current potential match\n        if (isIdSetMatch(newChild, potentialMatch, ctx)) {\n          return potentialMatch;\n        }\n\n        // computer the other potential matches of this new content\n        otherMatchCount += getIdIntersectionCount(\n          ctx,\n          potentialMatch,\n          newContent,\n        );\n        if (otherMatchCount > newChildPotentialIdCount) {\n          // if we have more potential id matches in _other_ content, we\n          // do not have a good candidate for an id match, so return null\n          return null;\n        }\n\n        // advanced to the next old content child\n        potentialMatch = potentialMatch.nextSibling;\n      }\n    }\n    return potentialMatch;\n  }\n\n  /**\n   * =============================================================================\n   *  Scans forward from the insertionPoint in the old parent looking for a potential soft match\n   *  for the newChild.  We stop if we find a potential soft match for the new child OR\n   *  if we find a potential id match in the old parents children OR if we find two\n   *  potential soft matches for the next two pieces of new content\n   * =============================================================================\n   * @param {Node} newContent\n   * @param {Node} oldParent\n   * @param {Node} newChild\n   * @param {Node} insertionPoint\n   * @param {MorphContext} ctx\n   * @returns {null | Node}\n   */\n  function findSoftMatch(newContent, oldParent, newChild, insertionPoint, ctx) {\n    /**\n     * @type {Node | null}\n     */\n    let potentialSoftMatch = insertionPoint;\n    /**\n     * @type {Node | null}\n     */\n    let nextSibling = newChild.nextSibling;\n    let siblingSoftMatchCount = 0;\n\n    while (potentialSoftMatch != null) {\n      if (getIdIntersectionCount(ctx, potentialSoftMatch, newContent) > 0) {\n        // the current potential soft match has a potential id set match with the remaining new\n        // content so bail out of looking\n        return null;\n      }\n\n      // if we have a soft match with the current node, return it\n      if (isSoftMatch(potentialSoftMatch, newChild)) {\n        return potentialSoftMatch;\n      }\n\n      if (isSoftMatch(potentialSoftMatch, nextSibling)) {\n        // the next new node has a soft match with this node, so\n        // increment the count of future soft matches\n        siblingSoftMatchCount++;\n        // ok to cast: if it was null it couldn't be a soft match\n        nextSibling = /** @type {Node} */ (nextSibling).nextSibling;\n\n        // If there are two future soft matches, bail to allow the siblings to soft match\n        // so that we don't consume future soft matches for the sake of the current node\n        if (siblingSoftMatchCount >= 2) {\n          return null;\n        }\n      }\n\n      // advanced to the next old content child\n      potentialSoftMatch = potentialSoftMatch.nextSibling;\n    }\n\n    return potentialSoftMatch;\n  }\n\n  /** @type {WeakSet<Node>} */\n  const generatedByIdiomorph = new WeakSet();\n\n  /**\n   *\n   * @param {string} newContent\n   * @returns {Node | null | DocumentFragment}\n   */\n  function parseContent(newContent) {\n    let parser = new DOMParser();\n\n    // remove svgs to avoid false-positive matches on head, etc.\n    let contentWithSvgsRemoved = newContent.replace(\n      /<svg(\\s[^>]*>|>)([\\s\\S]*?)<\\/svg>/gim,\n      \"\",\n    );\n\n    // if the newContent contains a html, head or body tag, we can simply parse it w/o wrapping\n    if (\n      contentWithSvgsRemoved.match(/<\\/html>/) ||\n      contentWithSvgsRemoved.match(/<\\/head>/) ||\n      contentWithSvgsRemoved.match(/<\\/body>/)\n    ) {\n      let content = parser.parseFromString(newContent, \"text/html\");\n      // if it is a full HTML document, return the document itself as the parent container\n      if (contentWithSvgsRemoved.match(/<\\/html>/)) {\n        generatedByIdiomorph.add(content);\n        return content;\n      } else {\n        // otherwise return the html element as the parent container\n        let htmlElement = content.firstChild;\n        if (htmlElement) {\n          generatedByIdiomorph.add(htmlElement);\n          return htmlElement;\n        } else {\n          return null;\n        }\n      }\n    } else {\n      // if it is partial HTML, wrap it in a template tag to provide a parent element and also to help\n      // deal with touchy tags like tr, tbody, etc.\n      let responseDoc = parser.parseFromString(\n        \"<body><template>\" + newContent + \"</template></body>\",\n        \"text/html\",\n      );\n      let content = /** @type {HTMLTemplateElement} */ (\n        responseDoc.body.querySelector(\"template\")\n      ).content;\n      generatedByIdiomorph.add(content);\n      return content;\n    }\n  }\n\n  /**\n   *\n   * @param {null | Node | HTMLCollection | Node[] | Document & {generatedByIdiomorph:boolean}} newContent\n   * @returns {Element}\n   */\n  function normalizeContent(newContent) {\n    if (newContent == null) {\n      // noinspection UnnecessaryLocalVariableJS\n      const dummyParent = document.createElement(\"div\");\n      return dummyParent;\n    } else if (generatedByIdiomorph.has(/** @type {Element} */ (newContent))) {\n      // the template tag created by idiomorph parsing can serve as a dummy parent\n      return /** @type {Element} */ (newContent);\n    } else if (newContent instanceof Node) {\n      // a single node is added as a child to a dummy parent\n      const dummyParent = document.createElement(\"div\");\n      dummyParent.append(newContent);\n      return dummyParent;\n    } else {\n      // all nodes in the array or HTMLElement collection are consolidated under\n      // a single dummy parent element\n      const dummyParent = document.createElement(\"div\");\n      for (const elt of [...newContent]) {\n        dummyParent.append(elt);\n      }\n      return dummyParent;\n    }\n  }\n\n  /**\n   *\n   * @param {Node | null} previousSibling\n   * @param {Node} morphedNode\n   * @param {Node | null} nextSibling\n   * @returns {Node[]}\n   */\n  function insertSiblings(previousSibling, morphedNode, nextSibling) {\n    /**\n     * @type {Node[]}\n     */\n    let stack = [];\n    /**\n     * @type {Node[]}\n     */\n    let added = [];\n    while (previousSibling != null) {\n      stack.push(previousSibling);\n      previousSibling = previousSibling.previousSibling;\n    }\n    // Base the loop on the node variable, so that you do not need runtime checks for\n    // undefined value inside the loop\n    let node = stack.pop();\n    while (node !== undefined) {\n      added.push(node); // push added preceding siblings on in order and insert\n      morphedNode.parentElement?.insertBefore(node, morphedNode);\n      node = stack.pop();\n    }\n    added.push(morphedNode);\n    while (nextSibling != null) {\n      stack.push(nextSibling);\n      added.push(nextSibling); // here we are going in order, so push on as we scan, rather than add\n      nextSibling = nextSibling.nextSibling;\n    }\n    while (stack.length > 0) {\n      const node = /** @type {Node} */ (stack.pop());\n      morphedNode.parentElement?.insertBefore(node, morphedNode.nextSibling);\n    }\n    return added;\n  }\n\n  /**\n   *\n   * @param {Element} newContent\n   * @param {Element} oldNode\n   * @param {MorphContext} ctx\n   * @returns {Node | null}\n   */\n  function findBestNodeMatch(newContent, oldNode, ctx) {\n    /**\n     * @type {Node | null}\n     */\n    let currentElement;\n    currentElement = newContent.firstChild;\n    /**\n     * @type {Node | null}\n     */\n    let bestElement = currentElement;\n    let score = 0;\n    while (currentElement) {\n      let newScore = scoreElement(currentElement, oldNode, ctx);\n      if (newScore > score) {\n        bestElement = currentElement;\n        score = newScore;\n      }\n      currentElement = currentElement.nextSibling;\n    }\n    return bestElement;\n  }\n\n  /**\n   *\n   * @param {Node | null} node1\n   * @param {Element} node2\n   * @param {MorphContext} ctx\n   * @returns {number}\n   */\n  // TODO: The function handles node1 and node2 as if they are Elements but the function is\n  //   called in places where node1 and node2 may be just Nodes, not Elements\n  function scoreElement(node1, node2, ctx) {\n    if (isSoftMatch(node2, node1)) {\n      // ok to cast: isSoftMatch performs a null check\n      return (\n        0.5 + getIdIntersectionCount(ctx, /** @type {Node} */ (node1), node2)\n      );\n    }\n    return 0;\n  }\n\n  /**\n   *\n   * @param {Node} tempNode\n   * @param {MorphContext} ctx\n   */\n  // TODO: The function handles tempNode as if it's Element but the function is called in\n  //   places where tempNode may be just a Node, not an Element\n  function removeNode(tempNode, ctx) {\n    removeIdsFromConsideration(ctx, tempNode);\n    // skip remove callbacks when we're going to be restoring this from the pantry in the second pass\n    if (\n      ctx.config.twoPass &&\n      hasPersistentIdNodes(ctx, tempNode) &&\n      tempNode instanceof Element\n    ) {\n      moveToPantry(tempNode, ctx);\n    } else {\n      if (ctx.callbacks.beforeNodeRemoved(tempNode) === false) return;\n      tempNode.parentNode?.removeChild(tempNode);\n      ctx.callbacks.afterNodeRemoved(tempNode);\n    }\n  }\n\n  /**\n   *\n   * @param {Node} node\n   * @param {MorphContext} ctx\n   */\n  function moveToPantry(node, ctx) {\n    if (ctx.callbacks.beforeNodePantried(node) === false) return;\n\n    Array.from(node.childNodes).forEach((child) => {\n      moveToPantry(child, ctx);\n    });\n\n    // After processing children, process the current node\n    if (ctx.persistentIds.has(/** @type {Element} */ (node).id)) {\n      // @ts-ignore - use proposed moveBefore feature\n      if (ctx.pantry.moveBefore) {\n        // @ts-ignore - use proposed moveBefore feature\n        ctx.pantry.moveBefore(node, null);\n      } else {\n        ctx.pantry.insertBefore(node, null);\n      }\n    } else {\n      if (ctx.callbacks.beforeNodeRemoved(node) === false) return;\n      node.parentNode?.removeChild(node);\n      ctx.callbacks.afterNodeRemoved(node);\n    }\n  }\n\n  /**\n   *\n   * @param {Node | null} root\n   * @param {MorphContext} ctx\n   */\n  function restoreFromPantry(root, ctx) {\n    if (root instanceof Element) {\n      Array.from(ctx.pantry.children)\n        .reverse()\n        .forEach((element) => {\n          const matchElement = root.querySelector(`#${element.id}`);\n          if (matchElement) {\n            // @ts-ignore - use proposed moveBefore feature\n            if (matchElement.parentElement?.moveBefore) {\n              // @ts-ignore - use proposed moveBefore feature\n              matchElement.parentElement.moveBefore(element, matchElement);\n              while (matchElement.hasChildNodes()) {\n                // @ts-ignore - use proposed moveBefore feature\n                element.moveBefore(matchElement.firstChild, null);\n              }\n            } else {\n              matchElement.before(element);\n              while (matchElement.firstChild) {\n                element.insertBefore(matchElement.firstChild, null);\n              }\n            }\n            if (\n              ctx.callbacks.beforeNodeMorphed(element, matchElement) !== false\n            ) {\n              syncNodeFrom(matchElement, element, ctx);\n              ctx.callbacks.afterNodeMorphed(element, matchElement);\n            }\n            matchElement.remove();\n          }\n        });\n      ctx.pantry.remove();\n    }\n  }\n\n  //=============================================================================\n  // ID Set Functions\n  //=============================================================================\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {string} id\n   * @returns {boolean}\n   */\n  function isIdInConsideration(ctx, id) {\n    return !ctx.deadIds.has(id);\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {string} id\n   * @param {Node} targetNode\n   * @returns {boolean}\n   */\n  function idIsWithinNode(ctx, id, targetNode) {\n    let idSet = ctx.idMap.get(targetNode) || EMPTY_SET;\n    return idSet.has(id);\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {Node} node\n   * @returns {void}\n   */\n  function removeIdsFromConsideration(ctx, node) {\n    let idSet = ctx.idMap.get(node) || EMPTY_SET;\n    for (const id of idSet) {\n      ctx.deadIds.add(id);\n    }\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function hasPersistentIdNodes(ctx, node) {\n    for (const id of ctx.idMap.get(node) || EMPTY_SET) {\n      if (ctx.persistentIds.has(id)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {Node} node1\n   * @param {Node} node2\n   * @returns {number}\n   */\n  function getIdIntersectionCount(ctx, node1, node2) {\n    let sourceSet = ctx.idMap.get(node1) || EMPTY_SET;\n    let matchCount = 0;\n    for (const id of sourceSet) {\n      // a potential match is an id in the source and potentialIdsSet, but\n      // that has not already been merged into the DOM\n      if (isIdInConsideration(ctx, id) && idIsWithinNode(ctx, id, node2)) {\n        ++matchCount;\n      }\n    }\n    return matchCount;\n  }\n\n  /**\n   * @param {Element} content\n   * @returns {Element[]}\n   */\n  function nodesWithIds(content) {\n    let nodes = Array.from(content.querySelectorAll(\"[id]\"));\n    if (content.id) {\n      nodes.push(content);\n    }\n    return nodes;\n  }\n\n  /**\n   * A bottom up algorithm that finds all elements with ids in the node\n   * argument and populates id sets for those nodes and all their parents, generating\n   * a set of ids contained within all nodes for the entire hierarchy in the DOM\n   *\n   * @param {Element} node\n   * @param {Map<Node, Set<string>>} idMap\n   */\n  function populateIdMapForNode(node, idMap) {\n    let nodeParent = node.parentElement;\n    for (const elt of nodesWithIds(node)) {\n      /**\n       * @type {Element|null}\n       */\n      let current = elt;\n      // walk up the parent hierarchy of that element, adding the id\n      // of element to the parent's id set\n      while (current !== nodeParent && current != null) {\n        let idSet = idMap.get(current);\n        // if the id set doesn't exist, create it and insert it in the  map\n        if (idSet == null) {\n          idSet = new Set();\n          idMap.set(current, idSet);\n        }\n        idSet.add(elt.id);\n        current = current.parentElement;\n      }\n    }\n  }\n\n  /**\n   * This function computes a map of nodes to all ids contained within that node (inclusive of the\n   * node).  This map can be used to ask if two nodes have intersecting sets of ids, which allows\n   * for a looser definition of \"matching\" than tradition id matching, and allows child nodes\n   * to contribute to a parent nodes matching.\n   *\n   * @param {Element} oldContent  the old content that will be morphed\n   * @param {Element} newContent  the new content to morph to\n   * @returns {Map<Node, Set<string>>} a map of nodes to id sets for the\n   */\n  function createIdMap(oldContent, newContent) {\n    /**\n     *\n     * @type {Map<Node, Set<string>>}\n     */\n    let idMap = new Map();\n    populateIdMapForNode(oldContent, idMap);\n    populateIdMapForNode(newContent, idMap);\n    return idMap;\n  }\n\n  /**\n   * @param {Element} oldContent  the old content that will be morphed\n   * @param {Element} newContent  the new content to morph to\n   * @returns {Set<string>} the id set of all persistent nodes that exist in both old and new content\n   */\n  function createPersistentIds(oldContent, newContent) {\n    const toIdTagName = (node) => node.tagName + \"#\" + node.id;\n    const oldIdSet = new Set(nodesWithIds(oldContent).map(toIdTagName));\n\n    let matchIdSet = new Set();\n    for (const newNode of nodesWithIds(newContent)) {\n      if (oldIdSet.has(toIdTagName(newNode))) {\n        matchIdSet.add(newNode.id);\n      }\n    }\n    return matchIdSet;\n  }\n\n  //=============================================================================\n  // This is what ends up becoming the Idiomorph global object\n  //=============================================================================\n  return {\n    morph,\n    defaults,\n  };\n})();\n\nexport {Idiomorph};\n","const customEvent = (() => {\n\treturn ('CustomEvent' in window && typeof window.CustomEvent === 'function')\n\t\t? (name, data) => new CustomEvent(name, data)\n\t\t: (name, data) => {\n\t\t\tconst newEvent = document.createEvent('CustomEvent')\n\t\t\tnewEvent.initCustomEvent(name, true, true, data)\n\t\t\treturn newEvent\n\t\t}\n})()\n\nconst handler = (node, ev) => {\n\treturn function (e) {\n\t\tconst scope = this\n\t\tconst detail = e.detail || {}\n\t\tnode.__events[ev].forEach(o => {\n\t\t\to.handler.apply(scope, [e].concat(detail.args))\n\t\t})\n\t}\n}\n\nconst removeListener = (node, ev) => {\n\tif (node.__events[ev] && node.__events[ev].listener) {\n\t\tnode.removeEventListener(\n\t\t\tev,\n\t\t\tnode.__events[ev].listener,\n\t\t\t(ev == 'focus' || ev == 'blur' || ev == 'mouseenter' || ev == 'mouseleave'))\n\t\tdelete node.__events[ev]\n\t}\n}\n\nconst delegate = (node, selector, callback) => {\n\treturn function (e) {\n\n\t\tconst element = this\n\t\tconst detail = e.detail || {}\n\n\t\tlet parent = e.target\n\n\t\twhile (parent) {\n\t\t\tif (parent.matches(selector)) {\n\t\t\t\te.delegateTarget = parent\n\t\t\t\tcallback.apply(element, [e].concat(detail.args))\n\t\t\t}\n\t\t\tif (parent === node) break\n\t\t\tparent = parent.parentNode\n\t\t}\n\t}\n}\n\nexport const on = (node, ev, selectorOrCallback, callback) => {\n\n\tnode.__events = node.__events || {}\n\tnode.__events[ev] = (node.__events[ev] || [])\n\n\tif (!node.__events[ev].length) {\n\t\tconst fn = handler(node, ev)\n\t\tnode.addEventListener(\n\t\t\tev,\n\t\t\tfn,\n\t\t\t(ev == 'focus' || ev == 'blur' || ev == 'mouseenter' || ev == 'mouseleave'))\n\t\tnode.__events[ev].listener = fn\n\t}\n\n\tif (selectorOrCallback.call) {\n\t\tnode.__events[ev].push({ handler: selectorOrCallback, callback: selectorOrCallback })\n\t} else {\n\t\tnode.__events[ev].push({ handler: delegate(node, selectorOrCallback, callback), callback })\n\t}\n}\n\nexport const off = (node, ev, fn) => {\n\n\tif (fn && node.__events[ev] && node.__events[ev].length) {\n\t\tvar old = node.__events[ev]\n\t\tnode.__events[ev] = node.__events[ev].filter(function (o) { return o.callback != fn; })\n\t\tnode.__events[ev].listener = old.listener\n\t\tif (!node.__events[ev].length)\n\t\t\tremoveListener(node, ev)\n\t} else {\n\t\tremoveListener(node, ev)\n\t}\n}\n\nexport const trigger = (node, name, args) => {\n\tnode.dispatchEvent(customEvent(name, { bubbles: true, detail: args }))\n}\n","import { type Component } from '..'\nimport { Idiomorph } from 'idiomorph/dist/idiomorph.esm'\nimport { rAF, dup, safe } from './utils'\nimport { buildtemplates } from './template-system'\nimport { on, off, trigger } from './utils/events'\nimport { publish, subscribe } from './utils/pubsub'\n\nexport default function Component( elm, { module, dependencies, templates, components }) {\n\n\tconst options = getOptions( module )\n\tconst initialState = (new Function( `return ${elm.getAttribute('html-model') || '{}'}`))()\n\tconst selector = Object.keys(components).toString()\n\n\tbuildtemplates( elm, selector, templates, components )\n\n\tconst tplid = elm.getAttribute('tplid')\n\tconst template = tplid ? templates[tplid] : null\n\tconst state = { data: module.model ? dup(module.model) : {} }\n\tstate.data = Object.assign( state.data, initialState)\n\n\tconst base: Component = {\n\t\ttemplate,\n\t\telm,\n\t\tdependencies,\n\t\tpublish,\n\t\tsubscribe,\n\n\t\tmain(fn) {\n\t\t\toptions.main = fn\n\t\t},\n\n\t\tunmount(fn) {\n\t\t\toptions.unmount = fn\n\t\t},\n\n\t\tonupdate(fn) {\n\t\t\toptions.onupdate = fn\n\t\t},\n\n\t\ton(eventName, selectorOrCallback, callback) {\n\t\t\ton(elm, eventName, selectorOrCallback, callback)\n\t\t},\n\n\t\toff(eventName, callback) {\n\t\t\toff(elm, eventName, callback)\n\t\t},\n\n\t\ttrigger(eventName, target, args) {\n\t\t\tif (target.constructor === String) {\n\t\t\t\tArray\n\t\t\t\t\t.from(elm.querySelectorAll(target))\n\t\t\t\t\t.forEach( children => trigger(children, eventName, { args: args }) )\n\t\t\t}\n\t\t\telse trigger(elm, eventName, { args: target })\n\t\t},\n\n\t\temit: ( ...args ) => {\n\t\t\ttrigger(elm, args.shift(), { args: args })\n\t\t},\n\n\t\tstate: {\n\t\t\tset( data ) {\n\t\t\t\tif (data.constructor === Function) {\n\t\t\t\t\tconst newstate = dup(state.data)\n\t\t\t\t\tdata(newstate)\n\t\t\t\t\tbase.render(newstate)\n\t\t\t\t} else {\n\t\t\t\t\tbase.render(data)\n\t\t\t\t}\n\t\t\t\treturn new Promise((resolve) => rAF(_ => rAF(() => resolve(state.data))))\n\t\t\t},\n\t\t\tget() {\n\t\t\t\treturn dup(state.data)\n\t\t\t},\n\n\t\t\tgetRaw(){\n\t\t\t\treturn state.data\n\t\t\t}\n\t\t},\n\n\t\trender(data = state.data) {\n\n\t\t\tif (!document.body.contains(elm)) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tstate.data = Object.assign(state.data, data)\n\n\t\t\tconst newdata = dup(state.data)\n\t\t\tconst newhtml = templates[tplid].call(Object.assign(options.view(newdata), elm.___scope___), elm, safe)\n\n\t\t\tIdiomorph.morph(elm, newhtml, IdiomorphOptions(elm))\n\t\t\tupdateScope( elm )\n\n\t\t\trAF(_ => {\n\t\t\t\tArray\n\t\t\t\t\t.from(elm.querySelectorAll('[tplid]'))\n\t\t\t\t\t.forEach((child: any) => {\n\t\t\t\t\t\tconst props = Object.assign( child.base.state.getRaw(), data )\n\t\t\t\t\t\tchild.options.onupdate(props)\n\t\t\t\t\t\tchild.base.render(props)\n\t\t\t\t\t})\n\t\t\t})\n\t\t},\n\n\t\tinnerHTML( target, html_ ) {\n\n\t\t\tconst element = html_? target : elm\n\t\t\tconst clone = element.cloneNode()\n\t\t\tconst html = html_? html_ : target\n\t\t\tclone.innerHTML = html\n\n\t\t\trAF( _ => Idiomorph.morph(element, clone, IdiomorphOptions) )\n\t\t}\n\t}\n\n\treturn { base, options }\n}\n\nconst getOptions = (module) => ({\n\tmain: (a) => a,\n\tunmount: (a) => a,\n\tonupdate: (a) => a,\n\tview: module.view ? module.view : (a) => a\n})\n\nconst updateScope = (node) => {\n\tnode.querySelectorAll('[scope]').forEach( scopeElement => {\n\t\tscopeElement.querySelectorAll('[tplid]').forEach( cp => {\n\t\t\tif( !cp.___scope___ ) {\n\t\t\t\tconst script = scopeElement.lastElementChild\n\t\t\t\tcp.___scope___ = 'scope' in script.dataset? (new Function(`return ${script.text}`))() : {}\n\t\t\t}\n\t\t})\n\t})\n}\n\n\nconst IdiomorphOptions = (parent) => ({\n\n\tcallbacks: {\n\n\t\tbeforeNodeMorphed( node ) {\n\t\t\tif( node.nodeType === 1 ) {\n\t\t\t\tif( 'html-static' in node.attributes ) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tif( node.base && node !== parent ) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})\n","import Component from './component'\nimport { purge, rAF } from './utils'\n\nexport default function Element(module, dependencies, templates, components) {\n\n\treturn class extends HTMLElement {\n\n\t\tbase: any\n\t\toptions: any\n\t\treturns : any\n\t\t__events: any\n\n\t\tconstructor() {\n\n\t\t\tsuper()\n\t\t\tconst { base, options } = Component(this, { module, dependencies, templates, components })\n\n\t\t\tthis.base = base\n\t\t\tthis.options = options\n\t\t\tthis.base.render()\n\t\t\tthis.returns = module.default(base)\n\t\t}\n\n\t\tconnectedCallback() {\n\n\t\t\tif( this.__template && this.__template.constructor === Promise ) {\n\t\t\t\tthis.__template.then( _ => {\n\t\t\t\t\tif( this.base && this.options.main) {\n\t\t\t\t\t\tconst array = this.options.main(this.base)\n\t\t\t\t\t\tif( array && array.length ){\n\t\t\t\t\t\t\tarray.forEach(f => f(this.base))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif( this.returns && this.returns.constructor === Promise ) {\n\t\t\t\tthis.returns.then( _ => {\n\t\t\t\t\tif( this.base && this.options.main) {\n\t\t\t\t\t\tconst array = this.options.main(this.base)\n\t\t\t\t\t\tif( array && array.length ){\n\t\t\t\t\t\t\tarray.forEach(f => f(this.base))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t} else {\n\t\t\t\tif( this.base && this.options.main ){\n\t\t\t\t\tconst array = this.options.main(this.base)\n\t\t\t\t\tif( array && array.length ) {\n\t\t\t\t\t\tarray.forEach(f => f(this.base))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdisconnectedCallback() {\n\t\t\tthis.options.unmount(this.base)\n\t\t\trAF(() => {\n\t\t\t\tif(!document.body.contains(this) ) {\n\t\t\t\t\tthis.__events? this.__events = null : null\n\t\t\t\t\tthis.base? this.base.elm = null : null\n\t\t\t\t\tthis.base? this.base = null : null\n\t\t\t\t\tpurge(this)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tattributeChangedCallback() {\n\t\t\t//TODO\n\t\t}\n\t}\n}\n","import { templateConfig, buildtemplates } from './template-system'\nimport { publish, subscribe } from './utils/pubsub'\nimport { html, attributes } from '../html'\nimport Element from './element'\n\nconst templates = {}\nconst components = {}\n\nexport { html, attributes }\n\nexport default {\n\n\ttemplateConfig,\n\n\tpublish,\n\tsubscribe,\n\n\tregister( name, module, dependencies = {} ) {\n\t\tcomponents[name] = { name, module, dependencies }\n\t},\n\n\tstart( target = document.body ) {\n\t\tconst keys = Object.keys(components)\n\t\tconst selector = keys.toString()\n\t\tif( keys.length ) {\n\t\t\tbuildtemplates( target, selector, templates, components )\n\t\t\tregisterComponents()\n\t\t}\n\t}\n}\n\nconst registerComponents = () => {\n\tObject\n\t\t.values( components )\n\t\t.forEach( (component) => {\n\t\t\tconst { name, module, dependencies } = component as any\n\t\t\tif( !customElements.get(name) ){\n\t\t\t\tconst Base = Element(module, dependencies, templates, components)\n\t\t\t\tcustomElements.define(name, Base)\n\t\t\t}\n\t\t})\n}\n","\nexport const attributes = ( attrs ) => {\n\tconst result = Object.entries(attrs)\n\t\t.map(([key, value]) => {\n\t\t\tif( value === '' ) {\n\t\t\t\treturn key\n\t\t\t}\n\t\t\treturn `${key}=\"${value}\"`\n\t\t})\n\t\t.join(' ')\n\treturn result\n}\n\n// From\n// https://2ality.com/2015/01/template-strings-html.html#comment-2078932192\nexport const html = (literalSections, ...substs) => {\n\n\t// Use raw literal sections: we don’t want\n\t// backslashes (\\n etc.) to be interpreted\n\tlet raw = literalSections.raw\n\n\tlet result = ''\n\n\tsubsts.forEach((subst, i) => {\n\t\t// Retrieve the literal section preceding\n\t\t// the current substitution\n\t\tlet lit = raw[i]\n\n\t\t// In the example, map() returns an array:\n\t\t// If substitution is an array (and not a string),\n\t\t// we turn it into a string\n\t\tif (Array.isArray(subst)) {\n\t\t\tsubst = subst.join('')\n\t\t}\n\n\t\tresult += lit\n\t\tresult += subst\n\t})\n\t// Take care of last literal section\n\t// (Never fails, because an empty template string\n\t// produces one literal section, an empty string)\n\tresult += raw[raw.length-1] // (A)\n\n\treturn result\n}\n"],"names":["textarea","document","createElement","decodeHTML","text","innerHTML","value","rAF","fn","requestAnimationFrame","setTimeout","uuid","replace","c","r","Math","random","toString","dup","o","JSON","parse","stringify","purge","d","i","l","n","a","attributes","length","name","childNodes","safe","execute","val","err","parser","DOMParser","wrap","open","node","close","_a","parentNode","insertBefore","_b","nextSibling","config","tags","Template","element","html","regexTags","RegExp","virtual","parseFromString","querySelectorAll","forEach","htmlForeach","getAttribute","htmlFor","htmlIf","htmlInner","htmlClass","forEachInstruction","selector","split","match","varname","object","removeAttribute","setAttribute","script","dataset","scope","type","appendChild","createTextNode","id","className","trim","body","all","key","Transpile","outerHTML","decodedHTML","Function","_","variable","buildtemplates","target","templates","components","concat","matches","Array","from","reverse","template","content","createTemplateId","localName","module","children","constructor","Promise","__template","then","htmlstring","topics","_async","publish","params","Object","assign","topic","subscribe","method","push","filter","Idiomorph","EMPTY_SET","Set","defaults","morphStyle","callbacks","beforeNodeAdded","noOp","afterNodeAdded","beforeNodeMorphed","afterNodeMorphed","beforeNodeRemoved","afterNodeRemoved","beforeAttributeUpdated","beforeNodePantried","head","style","shouldPreserve","elt","shouldReAppend","shouldRemove","afterHeadMorphed","morphNormalizedContent","oldNode","normalizedNewContent","ctx","block","oldHead","querySelector","newHead","promises","handleHeadElement","ignore","morphChildren","twoPass","restoreFromPantry","bestMatch","newContent","currentElement","firstChild","bestElement","score","newScore","scoreElement","findBestNodeMatch","previousSibling","morphedNode","morphOldNodeTo","elements","stack","added","pop","parentElement","insertSiblings","ignoreValueOfActiveElement","possibleActiveElement","ignoreActiveValue","activeElement","ignoreActive","removeChild","isSoftMatch","HTMLHeadElement","syncNodeFrom","replaceChild","newParent","oldParent","HTMLTemplateElement","newChild","nextNewChild","insertionPoint","persistentIds","has","removeIdsFromConsideration","isIdSetMatch","idSetMatch","findIdSetMatch","removeNodesBetween","softMatch","findSoftMatch","tempNode","removeNode","ignoreAttribute","attr","to","updateType","nodeType","fromEl","toEl","fromAttributes","toAttributes","fromAttribute","toAttribute","hasAttribute","nodeValue","HTMLInputElement","fromValue","toValue","syncBooleanAttribute","HTMLOptionElement","HTMLTextAreaElement","syncInputValue","attributeName","Element","fromLiveValue","ignoreUpdate","newHeadTag","currentHead","removed","preserved","nodesToAppend","headMergeStyle","srcToNewHeadNodes","Map","newHeadChild","set","currentHeadElt","inNewContent","isReAppended","isPreserved","delete","values","newNode","newElt","createRange","createContextualFragment","href","src","resolve","promise","_resolve","addEventListener","removedElement","kept","createPantry","pantry","hidden","insertAdjacentElement","node1","node2","tagName","getIdIntersectionCount","startInclusive","endExclusive","cursor","newChildPotentialIdCount","potentialMatch","otherMatchCount","potentialSoftMatch","siblingSoftMatchCount","generatedByIdiomorph","WeakSet","idMap","get","hasPersistentIdNodes","moveToPantry","child","moveBefore","root","matchElement","hasChildNodes","before","remove","isIdInConsideration","deadIds","idIsWithinNode","targetNode","idSet","add","sourceSet","matchCount","nodesWithIds","nodes","populateIdMapForNode","nodeParent","current","createIdMap","oldContent","createPersistentIds","toIdTagName","oldIdSet","map","matchIdSet","morph","Document","documentElement","contentWithSvgsRemoved","htmlElement","parseContent","normalizedContent","Node","dummyParent","append","normalizeContent","mergedConfig","finalConfig","mergeDefaults","createMorphContext","customEvent","window","CustomEvent","data","newEvent","createEvent","initCustomEvent","handler","ev","e","this","detail","__events","apply","args","removeListener","listener","removeEventListener","delegate","callback","parent","delegateTarget","on","selectorOrCallback","call","off","old","trigger","dispatchEvent","bubbles","getOptions","main","unmount","onupdate","view","updateScope","scopeElement","cp","___scope___","lastElementChild","IdiomorphOptions","base","dependencies","HTMLElement","options","elm","initialState","keys","tplid","state","model","eventName","String","emit","shift","newstate","render","getRaw","contains","newdata","newhtml","props","html_","clone","cloneNode","Component","returns","default","connectedCallback","array","f","disconnectedCallback","attributeChangedCallback","index","templateConfig","newconfig","register","start","registerComponents","component","customElements","Base","define","attrs","entries","join","literalSections","substs","raw","result","subst","lit","isArray"],"mappings":"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","x_google_ignoreList":[4]}