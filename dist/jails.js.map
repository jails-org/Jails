{"version":3,"file":"jails.js","sources":["../src/utils/index.ts","../node_modules/idiomorph/dist/idiomorph.esm.js","../src/utils/pubsub.ts","../src/component.ts","../src/element.ts","../src/template-system.ts","../src/index.ts"],"sourcesContent":["\nexport const g = {\n\tscope: {}\n}\n\nexport const rAF = (fn) => {\n\tif (requestAnimationFrame)\n\t\treturn requestAnimationFrame(fn)\n\telse\n\t\treturn setTimeout(fn, 1000 / 60)\n}\n\nexport const uuid = () => {\n\treturn Math.random().toString(36).substring(2, 9)\n}\n\nexport const dup = (o) => {\n\treturn JSON.parse(JSON.stringify(o))\n}\n\nexport const safe = (execute, val) => {\n\ttry{\n\t\treturn execute()\n\t}catch(err){\n\t\treturn val || ''\n\t}\n}\n","/**\n * @typedef {object} ConfigHead\n *\n * @property {'merge' | 'append' | 'morph' | 'none'} [style]\n * @property {boolean} [block]\n * @property {boolean} [ignore]\n * @property {function(Element): boolean} [shouldPreserve]\n * @property {function(Element): boolean} [shouldReAppend]\n * @property {function(Element): boolean} [shouldRemove]\n * @property {function(Element, {added: Node[], kept: Element[], removed: Element[]}): void} [afterHeadMorphed]\n */\n\n/**\n * @typedef {object} ConfigCallbacks\n *\n * @property {function(Node): boolean} [beforeNodeAdded]\n * @property {function(Node): void} [afterNodeAdded]\n * @property {function(Element, Node): boolean} [beforeNodeMorphed]\n * @property {function(Element, Node): void} [afterNodeMorphed]\n * @property {function(Element): boolean} [beforeNodeRemoved]\n * @property {function(Element): void} [afterNodeRemoved]\n * @property {function(string, Element, \"update\" | \"remove\"): boolean} [beforeAttributeUpdated]\n * @property {function(Element): boolean} [beforeNodePantried]\n */\n\n/**\n * @typedef {object} Config\n *\n * @property {'outerHTML' | 'innerHTML'} [morphStyle]\n * @property {boolean} [ignoreActive]\n * @property {boolean} [ignoreActiveValue]\n * @property {ConfigCallbacks} [callbacks]\n * @property {ConfigHead} [head]\n */\n\n/**\n * @typedef {function} NoOp\n *\n * @returns {void}\n */\n\n/**\n * @typedef {object} ConfigHeadInternal\n *\n * @property {'merge' | 'append' | 'morph' | 'none'} style\n * @property {boolean} [block]\n * @property {boolean} [ignore]\n * @property {(function(Element): boolean) | NoOp} shouldPreserve\n * @property {(function(Element): boolean) | NoOp} shouldReAppend\n * @property {(function(Element): boolean) | NoOp} shouldRemove\n * @property {(function(Element, {added: Node[], kept: Element[], removed: Element[]}): void) | NoOp} afterHeadMorphed\n */\n\n/**\n * @typedef {object} ConfigCallbacksInternal\n *\n * @property {(function(Node): boolean) | NoOp} beforeNodeAdded\n * @property {(function(Node): void) | NoOp} afterNodeAdded\n * @property {(function(Node, Node): boolean) | NoOp} beforeNodeMorphed\n * @property {(function(Node, Node): void) | NoOp} afterNodeMorphed\n * @property {(function(Node): boolean) | NoOp} beforeNodeRemoved\n * @property {(function(Node): void) | NoOp} afterNodeRemoved\n * @property {(function(string, Element, \"update\" | \"remove\"): boolean) | NoOp} beforeAttributeUpdated\n * @property {(function(Node): boolean) | NoOp} beforeNodePantried\n */\n\n/**\n * @typedef {object} ConfigInternal\n *\n * @property {'outerHTML' | 'innerHTML'} morphStyle\n * @property {boolean} [ignoreActive]\n * @property {boolean} [ignoreActiveValue]\n * @property {ConfigCallbacksInternal} callbacks\n * @property {ConfigHeadInternal} head\n * @property {boolean} [twoPass]\n */\n\n/**\n * @typedef {Function} Morph\n *\n * @param {Element | Document} oldNode\n * @param {Element | Node | HTMLCollection | Node[] | string | null} newContent\n * @param {Config} [config]\n * @returns {undefined | Node[]}\n */\n\n// base IIFE to define idiomorph\n/**\n *\n * @type {{defaults: ConfigInternal, morph: Morph}}\n */\nvar Idiomorph = (function () {\n  \"use strict\";\n\n  /**\n   * @typedef {object} MorphContext\n   *\n   * @property {Node} target\n   * @property {Node} newContent\n   * @property {ConfigInternal} config\n   * @property {ConfigInternal['morphStyle']} morphStyle\n   * @property {ConfigInternal['ignoreActive']} ignoreActive\n   * @property {ConfigInternal['ignoreActiveValue']} ignoreActiveValue\n   * @property {Map<Node, Set<string>>} idMap\n   * @property {Set<string>} persistentIds\n   * @property {Set<string>} deadIds\n   * @property {ConfigInternal['callbacks']} callbacks\n   * @property {ConfigInternal['head']} head\n   * @property {HTMLDivElement} pantry\n   */\n\n  //=============================================================================\n  // AND NOW IT BEGINS...\n  //=============================================================================\n\n  /**\n   *\n   * @type {Set<string>}\n   */\n  let EMPTY_SET = new Set();\n\n  /**\n   * Default configuration values, updatable by users now\n   * @type {ConfigInternal}\n   */\n  let defaults = {\n    morphStyle: \"outerHTML\",\n    callbacks: {\n      beforeNodeAdded: noOp,\n      afterNodeAdded: noOp,\n      beforeNodeMorphed: noOp,\n      afterNodeMorphed: noOp,\n      beforeNodeRemoved: noOp,\n      afterNodeRemoved: noOp,\n      beforeAttributeUpdated: noOp,\n      beforeNodePantried: noOp,\n    },\n    head: {\n      style: \"merge\",\n      shouldPreserve: function (elt) {\n        return elt.getAttribute(\"im-preserve\") === \"true\";\n      },\n      shouldReAppend: function (elt) {\n        return elt.getAttribute(\"im-re-append\") === \"true\";\n      },\n      shouldRemove: noOp,\n      afterHeadMorphed: noOp,\n    },\n  };\n\n  /**\n   * =============================================================================\n   * Core Morphing Algorithm - morph, morphNormalizedContent, morphOldNodeTo, morphChildren\n   * =============================================================================\n   *\n   * @param {Element | Document} oldNode\n   * @param {Element | Node | HTMLCollection | Node[] | string | null} newContent\n   * @param {Config} [config]\n   * @returns {undefined | Node[]}\n   */\n  function morph(oldNode, newContent, config = {}) {\n    if (oldNode instanceof Document) {\n      oldNode = oldNode.documentElement;\n    }\n\n    if (typeof newContent === \"string\") {\n      newContent = parseContent(newContent);\n    }\n\n    let normalizedContent = normalizeContent(newContent);\n\n    let ctx = createMorphContext(oldNode, normalizedContent, config);\n\n    return morphNormalizedContent(oldNode, normalizedContent, ctx);\n  }\n\n  /**\n   *\n   * @param {Element} oldNode\n   * @param {Element} normalizedNewContent\n   * @param {MorphContext} ctx\n   * @returns {undefined | Node[]}\n   */\n  function morphNormalizedContent(oldNode, normalizedNewContent, ctx) {\n    if (ctx.head.block) {\n      let oldHead = oldNode.querySelector(\"head\");\n      let newHead = normalizedNewContent.querySelector(\"head\");\n      if (oldHead && newHead) {\n        let promises = handleHeadElement(newHead, oldHead, ctx);\n        // when head promises resolve, call morph again, ignoring the head tag\n        Promise.all(promises).then(function () {\n          morphNormalizedContent(\n            oldNode,\n            normalizedNewContent,\n            Object.assign(ctx, {\n              head: {\n                block: false,\n                ignore: true,\n              },\n            }),\n          );\n        });\n        return;\n      }\n    }\n\n    if (ctx.morphStyle === \"innerHTML\") {\n      // innerHTML, so we are only updating the children\n      morphChildren(normalizedNewContent, oldNode, ctx);\n      if (ctx.config.twoPass) {\n        restoreFromPantry(oldNode, ctx);\n      }\n      return Array.from(oldNode.children);\n    } else if (ctx.morphStyle === \"outerHTML\" || ctx.morphStyle == null) {\n      // otherwise find the best element match in the new content, morph that, and merge its siblings\n      // into either side of the best match\n      let bestMatch = findBestNodeMatch(normalizedNewContent, oldNode, ctx);\n\n      // stash the siblings that will need to be inserted on either side of the best match\n      let previousSibling = bestMatch?.previousSibling ?? null;\n      let nextSibling = bestMatch?.nextSibling ?? null;\n\n      // morph it\n      let morphedNode = morphOldNodeTo(oldNode, bestMatch, ctx);\n\n      if (bestMatch) {\n        // if there was a best match, merge the siblings in too and return the\n        // whole bunch\n        if (morphedNode) {\n          const elements = insertSiblings(\n            previousSibling,\n            morphedNode,\n            nextSibling,\n          );\n          if (ctx.config.twoPass) {\n            restoreFromPantry(morphedNode.parentNode, ctx);\n          }\n          return elements;\n        }\n      } else {\n        // otherwise nothing was added to the DOM\n        return [];\n      }\n    } else {\n      throw \"Do not understand how to morph style \" + ctx.morphStyle;\n    }\n  }\n\n  /**\n   * @param {Node} possibleActiveElement\n   * @param {MorphContext} ctx\n   * @returns {boolean}\n   */\n  // TODO: ignoreActive and ignoreActiveValue are marked as optional since they are not\n  //   initialised in the default config object. As a result the && in the function body may\n  //   return undefined instead of boolean. Either expand the type of the return value to\n  //   include undefined or wrap the ctx.ignoreActiveValue into a Boolean()\n  function ignoreValueOfActiveElement(possibleActiveElement, ctx) {\n    return (\n      !!ctx.ignoreActiveValue &&\n      possibleActiveElement === document.activeElement &&\n      possibleActiveElement !== document.body\n    );\n  }\n\n  /**\n   * @param {Node} oldNode root node to merge content into\n   * @param {Node | null} newContent new content to merge\n   * @param {MorphContext} ctx the merge context\n   * @returns {Node | null} the element that ended up in the DOM\n   */\n  function morphOldNodeTo(oldNode, newContent, ctx) {\n    if (ctx.ignoreActive && oldNode === document.activeElement) {\n      // don't morph focused element\n    } else if (newContent == null) {\n      if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n\n      oldNode.parentNode?.removeChild(oldNode);\n      ctx.callbacks.afterNodeRemoved(oldNode);\n      return null;\n    } else if (!isSoftMatch(oldNode, newContent)) {\n      if (ctx.callbacks.beforeNodeRemoved(oldNode) === false) return oldNode;\n      if (ctx.callbacks.beforeNodeAdded(newContent) === false) return oldNode;\n\n      oldNode.parentNode?.replaceChild(newContent, oldNode);\n      ctx.callbacks.afterNodeAdded(newContent);\n      ctx.callbacks.afterNodeRemoved(oldNode);\n      return newContent;\n    } else {\n      if (ctx.callbacks.beforeNodeMorphed(oldNode, newContent) === false)\n        return oldNode;\n\n      if (oldNode instanceof HTMLHeadElement && ctx.head.ignore) {\n        // ignore the head element\n      } else if (\n        oldNode instanceof HTMLHeadElement &&\n        ctx.head.style !== \"morph\"\n      ) {\n        // ok to cast: if newContent wasn't also a <head>, it would've got caught in the `!isSoftMatch` branch above\n        handleHeadElement(\n          /** @type {HTMLHeadElement} */ (newContent),\n          oldNode,\n          ctx,\n        );\n      } else {\n        syncNodeFrom(newContent, oldNode, ctx);\n        if (!ignoreValueOfActiveElement(oldNode, ctx)) {\n          morphChildren(newContent, oldNode, ctx);\n        }\n      }\n      ctx.callbacks.afterNodeMorphed(oldNode, newContent);\n      return oldNode;\n    }\n    return null;\n  }\n\n  /**\n   * This is the core algorithm for matching up children.  The idea is to use id sets to try to match up\n   * nodes as faithfully as possible.  We greedily match, which allows us to keep the algorithm fast, but\n   * by using id sets, we are able to better match up with content deeper in the DOM.\n   *\n   * Basic algorithm is, for each node in the new content:\n   *\n   * - if we have reached the end of the old parent, append the new content\n   * - if the new content has an id set match with the current insertion point, morph\n   * - search for an id set match\n   * - if id set match found, morph\n   * - otherwise search for a \"soft\" match\n   * - if a soft match is found, morph\n   * - otherwise, prepend the new node before the current insertion point\n   *\n   * The two search algorithms terminate if competing node matches appear to outweigh what can be achieved\n   * with the current node.  See findIdSetMatch() and findSoftMatch() for details.\n   *\n   * @param {Node} newParent the parent element of the new content\n   * @param {Node} oldParent the old content that we are merging the new content into\n   * @param {MorphContext} ctx the merge context\n   * @returns {void}\n   */\n  function morphChildren(newParent, oldParent, ctx) {\n    if (\n      newParent instanceof HTMLTemplateElement &&\n      oldParent instanceof HTMLTemplateElement\n    ) {\n      newParent = newParent.content;\n      oldParent = oldParent.content;\n    }\n\n    /**\n     *\n     * @type {Node | null}\n     */\n    let nextNewChild = newParent.firstChild;\n    /**\n     *\n     * @type {Node | null}\n     */\n    let insertionPoint = oldParent.firstChild;\n    let newChild;\n\n    // run through all the new content\n    while (nextNewChild) {\n      newChild = nextNewChild;\n      nextNewChild = newChild.nextSibling;\n\n      // if we are at the end of the exiting parent's children, just append\n      if (insertionPoint == null) {\n        // skip add callbacks when we're going to be restoring this from the pantry in the second pass\n        if (\n          ctx.config.twoPass &&\n          ctx.persistentIds.has(/** @type {Element} */ (newChild).id)\n        ) {\n          oldParent.appendChild(newChild);\n        } else {\n          if (ctx.callbacks.beforeNodeAdded(newChild) === false) continue;\n          oldParent.appendChild(newChild);\n          ctx.callbacks.afterNodeAdded(newChild);\n        }\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // if the current node has an id set match then morph\n      if (isIdSetMatch(newChild, insertionPoint, ctx)) {\n        morphOldNodeTo(insertionPoint, newChild, ctx);\n        insertionPoint = insertionPoint.nextSibling;\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // otherwise search forward in the existing old children for an id set match\n      let idSetMatch = findIdSetMatch(\n        newParent,\n        oldParent,\n        newChild,\n        insertionPoint,\n        ctx,\n      );\n\n      // if we found a potential match, remove the nodes until that point and morph\n      if (idSetMatch) {\n        insertionPoint = removeNodesBetween(insertionPoint, idSetMatch, ctx);\n        morphOldNodeTo(idSetMatch, newChild, ctx);\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // no id set match found, so scan forward for a soft match for the current node\n      let softMatch = findSoftMatch(\n        newParent,\n        oldParent,\n        newChild,\n        insertionPoint,\n        ctx,\n      );\n\n      // if we found a soft match for the current node, morph\n      if (softMatch) {\n        insertionPoint = removeNodesBetween(insertionPoint, softMatch, ctx);\n        morphOldNodeTo(softMatch, newChild, ctx);\n        removeIdsFromConsideration(ctx, newChild);\n        continue;\n      }\n\n      // abandon all hope of morphing, just insert the new child before the insertion point\n      // and move on\n\n      // skip add callbacks when we're going to be restoring this from the pantry in the second pass\n      if (\n        ctx.config.twoPass &&\n        ctx.persistentIds.has(/** @type {Element} */ (newChild).id)\n      ) {\n        oldParent.insertBefore(newChild, insertionPoint);\n      } else {\n        if (ctx.callbacks.beforeNodeAdded(newChild) === false) continue;\n        oldParent.insertBefore(newChild, insertionPoint);\n        ctx.callbacks.afterNodeAdded(newChild);\n      }\n      removeIdsFromConsideration(ctx, newChild);\n    }\n\n    // remove any remaining old nodes that didn't match up with new content\n    while (insertionPoint !== null) {\n      let tempNode = insertionPoint;\n      insertionPoint = insertionPoint.nextSibling;\n      removeNode(tempNode, ctx);\n    }\n  }\n\n  //=============================================================================\n  // Attribute Syncing Code\n  //=============================================================================\n\n  /**\n   * @param {string} attr the attribute to be mutated\n   * @param {Element} to the element that is going to be updated\n   * @param {\"update\" | \"remove\"} updateType\n   * @param {MorphContext} ctx the merge context\n   * @returns {boolean} true if the attribute should be ignored, false otherwise\n   */\n  function ignoreAttribute(attr, to, updateType, ctx) {\n    if (\n      attr === \"value\" &&\n      ctx.ignoreActiveValue &&\n      to === document.activeElement\n    ) {\n      return true;\n    }\n    return ctx.callbacks.beforeAttributeUpdated(attr, to, updateType) === false;\n  }\n\n  /**\n   * syncs a given node with another node, copying over all attributes and\n   * inner element state from the 'from' node to the 'to' node\n   *\n   * @param {Node} from the element to copy attributes & state from\n   * @param {Node} to the element to copy attributes & state to\n   * @param {MorphContext} ctx the merge context\n   */\n  function syncNodeFrom(from, to, ctx) {\n    let type = from.nodeType;\n\n    // if is an element type, sync the attributes from the\n    // new node into the new node\n    if (type === 1 /* element type */) {\n      const fromEl = /** @type {Element} */ (from);\n      const toEl = /** @type {Element} */ (to);\n      const fromAttributes = fromEl.attributes;\n      const toAttributes = toEl.attributes;\n      for (const fromAttribute of fromAttributes) {\n        if (ignoreAttribute(fromAttribute.name, toEl, \"update\", ctx)) {\n          continue;\n        }\n        if (toEl.getAttribute(fromAttribute.name) !== fromAttribute.value) {\n          toEl.setAttribute(fromAttribute.name, fromAttribute.value);\n        }\n      }\n      // iterate backwards to avoid skipping over items when a delete occurs\n      for (let i = toAttributes.length - 1; 0 <= i; i--) {\n        const toAttribute = toAttributes[i];\n\n        // toAttributes is a live NamedNodeMap, so iteration+mutation is unsafe\n        // e.g. custom element attribute callbacks can remove other attributes\n        if (!toAttribute) continue;\n\n        if (!fromEl.hasAttribute(toAttribute.name)) {\n          if (ignoreAttribute(toAttribute.name, toEl, \"remove\", ctx)) {\n            continue;\n          }\n          toEl.removeAttribute(toAttribute.name);\n        }\n      }\n    }\n\n    // sync text nodes\n    if (type === 8 /* comment */ || type === 3 /* text */) {\n      if (to.nodeValue !== from.nodeValue) {\n        to.nodeValue = from.nodeValue;\n      }\n    }\n\n    if (!ignoreValueOfActiveElement(to, ctx)) {\n      // sync input values\n      syncInputValue(from, to, ctx);\n    }\n  }\n\n  /**\n   * @param {Element} from element to sync the value from\n   * @param {Element} to element to sync the value to\n   * @param {string} attributeName the attribute name\n   * @param {MorphContext} ctx the merge context\n   */\n  function syncBooleanAttribute(from, to, attributeName, ctx) {\n    // TODO: prefer set/getAttribute here\n    if (!(from instanceof Element && to instanceof Element)) return;\n    // @ts-ignore this function is only used on boolean attrs that are reflected as dom properties\n    const fromLiveValue = from[attributeName],\n      toLiveValue = to[attributeName];\n    if (fromLiveValue !== toLiveValue) {\n      let ignoreUpdate = ignoreAttribute(attributeName, to, \"update\", ctx);\n      if (!ignoreUpdate) {\n        // update attribute's associated DOM property\n        // @ts-ignore this function is only used on boolean attrs that are reflected as dom properties\n        to[attributeName] = from[attributeName];\n      }\n      if (fromLiveValue) {\n        if (!ignoreUpdate) {\n          // TODO: do we really want this? tests say so but it feels wrong\n          to.setAttribute(attributeName, fromLiveValue);\n        }\n      } else {\n        if (!ignoreAttribute(attributeName, to, \"remove\", ctx)) {\n          to.removeAttribute(attributeName);\n        }\n      }\n    }\n  }\n\n  /**\n   * NB: many bothans died to bring us information:\n   *\n   *  https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js\n   *  https://github.com/choojs/nanomorph/blob/master/lib/morph.jsL113\n   *\n   * @param {Node} from the element to sync the input value from\n   * @param {Node} to the element to sync the input value to\n   * @param {MorphContext} ctx the merge context\n   */\n  function syncInputValue(from, to, ctx) {\n    if (\n      from instanceof HTMLInputElement &&\n      to instanceof HTMLInputElement &&\n      from.type !== \"file\"\n    ) {\n      let fromValue = from.value;\n      let toValue = to.value;\n\n      // sync boolean attributes\n      syncBooleanAttribute(from, to, \"checked\", ctx);\n      syncBooleanAttribute(from, to, \"disabled\", ctx);\n\n      if (!from.hasAttribute(\"value\")) {\n        if (!ignoreAttribute(\"value\", to, \"remove\", ctx)) {\n          to.value = \"\";\n          to.removeAttribute(\"value\");\n        }\n      } else if (fromValue !== toValue) {\n        if (!ignoreAttribute(\"value\", to, \"update\", ctx)) {\n          to.setAttribute(\"value\", fromValue);\n          to.value = fromValue;\n        }\n      }\n      // TODO: QUESTION(1cg): this used to only check `from` unlike the other branches -- why?\n      // did I break something?\n    } else if (\n      from instanceof HTMLOptionElement &&\n      to instanceof HTMLOptionElement\n    ) {\n      syncBooleanAttribute(from, to, \"selected\", ctx);\n    } else if (\n      from instanceof HTMLTextAreaElement &&\n      to instanceof HTMLTextAreaElement\n    ) {\n      let fromValue = from.value;\n      let toValue = to.value;\n      if (ignoreAttribute(\"value\", to, \"update\", ctx)) {\n        return;\n      }\n      if (fromValue !== toValue) {\n        to.value = fromValue;\n      }\n      if (to.firstChild && to.firstChild.nodeValue !== fromValue) {\n        to.firstChild.nodeValue = fromValue;\n      }\n    }\n  }\n\n  /**\n   * =============================================================================\n   *  The HEAD tag can be handled specially, either w/ a 'merge' or 'append' style\n   * =============================================================================\n   * @param {Element} newHeadTag\n   * @param {Element} currentHead\n   * @param {MorphContext} ctx\n   * @returns {Promise<void>[]}\n   */\n  function handleHeadElement(newHeadTag, currentHead, ctx) {\n    /**\n     * @type {Node[]}\n     */\n    let added = [];\n    /**\n     * @type {Element[]}\n     */\n    let removed = [];\n    /**\n     * @type {Element[]}\n     */\n    let preserved = [];\n    /**\n     * @type {Element[]}\n     */\n    let nodesToAppend = [];\n\n    let headMergeStyle = ctx.head.style;\n\n    // put all new head elements into a Map, by their outerHTML\n    let srcToNewHeadNodes = new Map();\n    for (const newHeadChild of newHeadTag.children) {\n      srcToNewHeadNodes.set(newHeadChild.outerHTML, newHeadChild);\n    }\n\n    // for each elt in the current head\n    for (const currentHeadElt of currentHead.children) {\n      // If the current head element is in the map\n      let inNewContent = srcToNewHeadNodes.has(currentHeadElt.outerHTML);\n      let isReAppended = ctx.head.shouldReAppend(currentHeadElt);\n      let isPreserved = ctx.head.shouldPreserve(currentHeadElt);\n      if (inNewContent || isPreserved) {\n        if (isReAppended) {\n          // remove the current version and let the new version replace it and re-execute\n          removed.push(currentHeadElt);\n        } else {\n          // this element already exists and should not be re-appended, so remove it from\n          // the new content map, preserving it in the DOM\n          srcToNewHeadNodes.delete(currentHeadElt.outerHTML);\n          preserved.push(currentHeadElt);\n        }\n      } else {\n        if (headMergeStyle === \"append\") {\n          // we are appending and this existing element is not new content\n          // so if and only if it is marked for re-append do we do anything\n          if (isReAppended) {\n            removed.push(currentHeadElt);\n            nodesToAppend.push(currentHeadElt);\n          }\n        } else {\n          // if this is a merge, we remove this content since it is not in the new head\n          if (ctx.head.shouldRemove(currentHeadElt) !== false) {\n            removed.push(currentHeadElt);\n          }\n        }\n      }\n    }\n\n    // Push the remaining new head elements in the Map into the\n    // nodes to append to the head tag\n    nodesToAppend.push(...srcToNewHeadNodes.values());\n    log(\"to append: \", nodesToAppend);\n\n    let promises = [];\n    for (const newNode of nodesToAppend) {\n      log(\"adding: \", newNode);\n      // TODO: This could theoretically be null, based on type\n      let newElt = /** @type {ChildNode} */ (\n        document.createRange().createContextualFragment(newNode.outerHTML)\n          .firstChild\n      );\n      log(newElt);\n      if (ctx.callbacks.beforeNodeAdded(newElt) !== false) {\n        if (\n          (\"href\" in newElt && newElt.href) ||\n          (\"src\" in newElt && newElt.src)\n        ) {\n          /** @type {(result?: any) => void} */ let resolve;\n          let promise = new Promise(function (_resolve) {\n            resolve = _resolve;\n          });\n          newElt.addEventListener(\"load\", function () {\n            resolve();\n          });\n          promises.push(promise);\n        }\n        currentHead.appendChild(newElt);\n        ctx.callbacks.afterNodeAdded(newElt);\n        added.push(newElt);\n      }\n    }\n\n    // remove all removed elements, after we have appended the new elements to avoid\n    // additional network requests for things like style sheets\n    for (const removedElement of removed) {\n      if (ctx.callbacks.beforeNodeRemoved(removedElement) !== false) {\n        currentHead.removeChild(removedElement);\n        ctx.callbacks.afterNodeRemoved(removedElement);\n      }\n    }\n\n    ctx.head.afterHeadMorphed(currentHead, {\n      added: added,\n      kept: preserved,\n      removed: removed,\n    });\n    return promises;\n  }\n\n  //=============================================================================\n  // Misc\n  //=============================================================================\n\n  /**\n   * @param {any[]} _args\n   */\n  function log(..._args) {\n    //console.log(args);\n  }\n\n  function noOp() {}\n\n  /**\n   * Deep merges the config object and the Idiomoroph.defaults object to\n   * produce a final configuration object\n   * @param {Config} config\n   * @returns {ConfigInternal}\n   */\n  function mergeDefaults(config) {\n    /**\n     * @type {ConfigInternal}\n     */\n    let finalConfig = Object.assign({}, defaults);\n\n    // copy top level stuff into final config\n    Object.assign(finalConfig, config);\n\n    // copy callbacks into final config (do this to deep merge the callbacks)\n    finalConfig.callbacks = Object.assign(\n      {},\n      defaults.callbacks,\n      config.callbacks,\n    );\n\n    // copy head config into final config  (do this to deep merge the head)\n    finalConfig.head = Object.assign({}, defaults.head, config.head);\n\n    return finalConfig;\n  }\n\n  /**\n   *\n   * @param {Element} oldNode\n   * @param {Element} newContent\n   * @param {Config} config\n   * @returns {MorphContext}\n   */\n  function createMorphContext(oldNode, newContent, config) {\n    const mergedConfig = mergeDefaults(config);\n    return {\n      target: oldNode,\n      newContent: newContent,\n      config: mergedConfig,\n      morphStyle: mergedConfig.morphStyle,\n      ignoreActive: mergedConfig.ignoreActive,\n      ignoreActiveValue: mergedConfig.ignoreActiveValue,\n      idMap: createIdMap(oldNode, newContent),\n      deadIds: new Set(),\n      persistentIds: mergedConfig.twoPass\n        ? createPersistentIds(oldNode, newContent)\n        : new Set(),\n      pantry: mergedConfig.twoPass\n        ? createPantry()\n        : document.createElement(\"div\"),\n      callbacks: mergedConfig.callbacks,\n      head: mergedConfig.head,\n    };\n  }\n\n  function createPantry() {\n    const pantry = document.createElement(\"div\");\n    pantry.hidden = true;\n    document.body.insertAdjacentElement(\"afterend\", pantry);\n    return pantry;\n  }\n\n  /**\n   *\n   * @param {Node | null} node1\n   * @param {Node | null} node2\n   * @param {MorphContext} ctx\n   * @returns {boolean}\n   */\n  // TODO: The function handles this as if it's Element or null, but the function is called in\n  //   places where the arguments may be just a Node, not an Element\n  function isIdSetMatch(node1, node2, ctx) {\n    if (node1 == null || node2 == null) {\n      return false;\n    }\n    if (\n      node1 instanceof Element &&\n      node2 instanceof Element &&\n      node1.tagName === node2.tagName\n    ) {\n      if (node1.id !== \"\" && node1.id === node2.id) {\n        return true;\n      } else {\n        return getIdIntersectionCount(ctx, node1, node2) > 0;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param {Node | null} oldNode\n   * @param {Node | null} newNode\n   * @returns {boolean}\n   */\n  function isSoftMatch(oldNode, newNode) {\n    if (oldNode == null || newNode == null) {\n      return false;\n    }\n    // ok to cast: if one is not element, `id` or `tagName` will be undefined and we'll compare that\n    // If oldNode has an `id` with possible state and it doesn't match newNode.id then avoid morphing\n    if (\n      /** @type {Element} */ (oldNode).id &&\n      /** @type {Element} */ (oldNode).id !==\n        /** @type {Element} */ (newNode).id\n    ) {\n      return false;\n    }\n    return (\n      oldNode.nodeType === newNode.nodeType &&\n      /** @type {Element} */ (oldNode).tagName ===\n        /** @type {Element} */ (newNode).tagName\n    );\n  }\n\n  /**\n   *\n   * @param {Node} startInclusive\n   * @param {Node} endExclusive\n   * @param {MorphContext} ctx\n   * @returns {Node | null}\n   */\n  function removeNodesBetween(startInclusive, endExclusive, ctx) {\n    /** @type {Node | null} */ let cursor = startInclusive;\n    while (cursor !== endExclusive) {\n      let tempNode = /** @type {Node} */ (cursor);\n      // TODO: Prefer assigning to a new variable here or expand the type of startInclusive\n      //  to be Node | null\n      cursor = tempNode.nextSibling;\n      removeNode(tempNode, ctx);\n    }\n    removeIdsFromConsideration(ctx, endExclusive);\n    return endExclusive.nextSibling;\n  }\n\n  /**\n   * =============================================================================\n   *  Scans forward from the insertionPoint in the old parent looking for a potential id match\n   *  for the newChild.  We stop if we find a potential id match for the new child OR\n   *  if the number of potential id matches we are discarding is greater than the\n   *  potential id matches for the new child\n   * =============================================================================\n   * @param {Node} newContent\n   * @param {Node} oldParent\n   * @param {Node} newChild\n   * @param {Node} insertionPoint\n   * @param {MorphContext} ctx\n   * @returns {null | Node}\n   */\n  function findIdSetMatch(\n    newContent,\n    oldParent,\n    newChild,\n    insertionPoint,\n    ctx,\n  ) {\n    // max id matches we are willing to discard in our search\n    let newChildPotentialIdCount = getIdIntersectionCount(\n      ctx,\n      newChild,\n      oldParent,\n    );\n\n    /**\n     * @type {Node | null}\n     */\n    let potentialMatch = null;\n\n    // only search forward if there is a possibility of an id match\n    if (newChildPotentialIdCount > 0) {\n      // TODO: This is ghosting the potentialMatch variable outside of this block.\n      //   Probably an error\n      potentialMatch = insertionPoint;\n      // if there is a possibility of an id match, scan forward\n      // keep track of the potential id match count we are discarding (the\n      // newChildPotentialIdCount must be greater than this to make it likely\n      // worth it)\n      let otherMatchCount = 0;\n      while (potentialMatch != null) {\n        // If we have an id match, return the current potential match\n        if (isIdSetMatch(newChild, potentialMatch, ctx)) {\n          return potentialMatch;\n        }\n\n        // computer the other potential matches of this new content\n        otherMatchCount += getIdIntersectionCount(\n          ctx,\n          potentialMatch,\n          newContent,\n        );\n        if (otherMatchCount > newChildPotentialIdCount) {\n          // if we have more potential id matches in _other_ content, we\n          // do not have a good candidate for an id match, so return null\n          return null;\n        }\n\n        // advanced to the next old content child\n        potentialMatch = potentialMatch.nextSibling;\n      }\n    }\n    return potentialMatch;\n  }\n\n  /**\n   * =============================================================================\n   *  Scans forward from the insertionPoint in the old parent looking for a potential soft match\n   *  for the newChild.  We stop if we find a potential soft match for the new child OR\n   *  if we find a potential id match in the old parents children OR if we find two\n   *  potential soft matches for the next two pieces of new content\n   * =============================================================================\n   * @param {Node} newContent\n   * @param {Node} oldParent\n   * @param {Node} newChild\n   * @param {Node} insertionPoint\n   * @param {MorphContext} ctx\n   * @returns {null | Node}\n   */\n  function findSoftMatch(newContent, oldParent, newChild, insertionPoint, ctx) {\n    /**\n     * @type {Node | null}\n     */\n    let potentialSoftMatch = insertionPoint;\n    /**\n     * @type {Node | null}\n     */\n    let nextSibling = newChild.nextSibling;\n    let siblingSoftMatchCount = 0;\n\n    while (potentialSoftMatch != null) {\n      if (getIdIntersectionCount(ctx, potentialSoftMatch, newContent) > 0) {\n        // the current potential soft match has a potential id set match with the remaining new\n        // content so bail out of looking\n        return null;\n      }\n\n      // if we have a soft match with the current node, return it\n      if (isSoftMatch(potentialSoftMatch, newChild)) {\n        return potentialSoftMatch;\n      }\n\n      if (isSoftMatch(potentialSoftMatch, nextSibling)) {\n        // the next new node has a soft match with this node, so\n        // increment the count of future soft matches\n        siblingSoftMatchCount++;\n        // ok to cast: if it was null it couldn't be a soft match\n        nextSibling = /** @type {Node} */ (nextSibling).nextSibling;\n\n        // If there are two future soft matches, bail to allow the siblings to soft match\n        // so that we don't consume future soft matches for the sake of the current node\n        if (siblingSoftMatchCount >= 2) {\n          return null;\n        }\n      }\n\n      // advanced to the next old content child\n      potentialSoftMatch = potentialSoftMatch.nextSibling;\n    }\n\n    return potentialSoftMatch;\n  }\n\n  /** @type {WeakSet<Node>} */\n  const generatedByIdiomorph = new WeakSet();\n\n  /**\n   *\n   * @param {string} newContent\n   * @returns {Node | null | DocumentFragment}\n   */\n  function parseContent(newContent) {\n    let parser = new DOMParser();\n\n    // remove svgs to avoid false-positive matches on head, etc.\n    let contentWithSvgsRemoved = newContent.replace(\n      /<svg(\\s[^>]*>|>)([\\s\\S]*?)<\\/svg>/gim,\n      \"\",\n    );\n\n    // if the newContent contains a html, head or body tag, we can simply parse it w/o wrapping\n    if (\n      contentWithSvgsRemoved.match(/<\\/html>/) ||\n      contentWithSvgsRemoved.match(/<\\/head>/) ||\n      contentWithSvgsRemoved.match(/<\\/body>/)\n    ) {\n      let content = parser.parseFromString(newContent, \"text/html\");\n      // if it is a full HTML document, return the document itself as the parent container\n      if (contentWithSvgsRemoved.match(/<\\/html>/)) {\n        generatedByIdiomorph.add(content);\n        return content;\n      } else {\n        // otherwise return the html element as the parent container\n        let htmlElement = content.firstChild;\n        if (htmlElement) {\n          generatedByIdiomorph.add(htmlElement);\n          return htmlElement;\n        } else {\n          return null;\n        }\n      }\n    } else {\n      // if it is partial HTML, wrap it in a template tag to provide a parent element and also to help\n      // deal with touchy tags like tr, tbody, etc.\n      let responseDoc = parser.parseFromString(\n        \"<body><template>\" + newContent + \"</template></body>\",\n        \"text/html\",\n      );\n      let content = /** @type {HTMLTemplateElement} */ (\n        responseDoc.body.querySelector(\"template\")\n      ).content;\n      generatedByIdiomorph.add(content);\n      return content;\n    }\n  }\n\n  /**\n   *\n   * @param {null | Node | HTMLCollection | Node[] | Document & {generatedByIdiomorph:boolean}} newContent\n   * @returns {Element}\n   */\n  function normalizeContent(newContent) {\n    if (newContent == null) {\n      // noinspection UnnecessaryLocalVariableJS\n      const dummyParent = document.createElement(\"div\");\n      return dummyParent;\n    } else if (generatedByIdiomorph.has(/** @type {Element} */ (newContent))) {\n      // the template tag created by idiomorph parsing can serve as a dummy parent\n      return /** @type {Element} */ (newContent);\n    } else if (newContent instanceof Node) {\n      // a single node is added as a child to a dummy parent\n      const dummyParent = document.createElement(\"div\");\n      dummyParent.append(newContent);\n      return dummyParent;\n    } else {\n      // all nodes in the array or HTMLElement collection are consolidated under\n      // a single dummy parent element\n      const dummyParent = document.createElement(\"div\");\n      for (const elt of [...newContent]) {\n        dummyParent.append(elt);\n      }\n      return dummyParent;\n    }\n  }\n\n  /**\n   *\n   * @param {Node | null} previousSibling\n   * @param {Node} morphedNode\n   * @param {Node | null} nextSibling\n   * @returns {Node[]}\n   */\n  function insertSiblings(previousSibling, morphedNode, nextSibling) {\n    /**\n     * @type {Node[]}\n     */\n    let stack = [];\n    /**\n     * @type {Node[]}\n     */\n    let added = [];\n    while (previousSibling != null) {\n      stack.push(previousSibling);\n      previousSibling = previousSibling.previousSibling;\n    }\n    // Base the loop on the node variable, so that you do not need runtime checks for\n    // undefined value inside the loop\n    let node = stack.pop();\n    while (node !== undefined) {\n      added.push(node); // push added preceding siblings on in order and insert\n      morphedNode.parentElement?.insertBefore(node, morphedNode);\n      node = stack.pop();\n    }\n    added.push(morphedNode);\n    while (nextSibling != null) {\n      stack.push(nextSibling);\n      added.push(nextSibling); // here we are going in order, so push on as we scan, rather than add\n      nextSibling = nextSibling.nextSibling;\n    }\n    while (stack.length > 0) {\n      const node = /** @type {Node} */ (stack.pop());\n      morphedNode.parentElement?.insertBefore(node, morphedNode.nextSibling);\n    }\n    return added;\n  }\n\n  /**\n   *\n   * @param {Element} newContent\n   * @param {Element} oldNode\n   * @param {MorphContext} ctx\n   * @returns {Node | null}\n   */\n  function findBestNodeMatch(newContent, oldNode, ctx) {\n    /**\n     * @type {Node | null}\n     */\n    let currentElement;\n    currentElement = newContent.firstChild;\n    /**\n     * @type {Node | null}\n     */\n    let bestElement = currentElement;\n    let score = 0;\n    while (currentElement) {\n      let newScore = scoreElement(currentElement, oldNode, ctx);\n      if (newScore > score) {\n        bestElement = currentElement;\n        score = newScore;\n      }\n      currentElement = currentElement.nextSibling;\n    }\n    return bestElement;\n  }\n\n  /**\n   *\n   * @param {Node | null} node1\n   * @param {Element} node2\n   * @param {MorphContext} ctx\n   * @returns {number}\n   */\n  // TODO: The function handles node1 and node2 as if they are Elements but the function is\n  //   called in places where node1 and node2 may be just Nodes, not Elements\n  function scoreElement(node1, node2, ctx) {\n    if (isSoftMatch(node2, node1)) {\n      // ok to cast: isSoftMatch performs a null check\n      return (\n        0.5 + getIdIntersectionCount(ctx, /** @type {Node} */ (node1), node2)\n      );\n    }\n    return 0;\n  }\n\n  /**\n   *\n   * @param {Node} tempNode\n   * @param {MorphContext} ctx\n   */\n  // TODO: The function handles tempNode as if it's Element but the function is called in\n  //   places where tempNode may be just a Node, not an Element\n  function removeNode(tempNode, ctx) {\n    removeIdsFromConsideration(ctx, tempNode);\n    // skip remove callbacks when we're going to be restoring this from the pantry in the second pass\n    if (\n      ctx.config.twoPass &&\n      hasPersistentIdNodes(ctx, tempNode) &&\n      tempNode instanceof Element\n    ) {\n      moveToPantry(tempNode, ctx);\n    } else {\n      if (ctx.callbacks.beforeNodeRemoved(tempNode) === false) return;\n      tempNode.parentNode?.removeChild(tempNode);\n      ctx.callbacks.afterNodeRemoved(tempNode);\n    }\n  }\n\n  /**\n   *\n   * @param {Node} node\n   * @param {MorphContext} ctx\n   */\n  function moveToPantry(node, ctx) {\n    if (ctx.callbacks.beforeNodePantried(node) === false) return;\n\n    Array.from(node.childNodes).forEach((child) => {\n      moveToPantry(child, ctx);\n    });\n\n    // After processing children, process the current node\n    if (ctx.persistentIds.has(/** @type {Element} */ (node).id)) {\n      // @ts-ignore - use proposed moveBefore feature\n      if (ctx.pantry.moveBefore) {\n        // @ts-ignore - use proposed moveBefore feature\n        ctx.pantry.moveBefore(node, null);\n      } else {\n        ctx.pantry.insertBefore(node, null);\n      }\n    } else {\n      if (ctx.callbacks.beforeNodeRemoved(node) === false) return;\n      node.parentNode?.removeChild(node);\n      ctx.callbacks.afterNodeRemoved(node);\n    }\n  }\n\n  /**\n   *\n   * @param {Node | null} root\n   * @param {MorphContext} ctx\n   */\n  function restoreFromPantry(root, ctx) {\n    if (root instanceof Element) {\n      Array.from(ctx.pantry.children)\n        .reverse()\n        .forEach((element) => {\n          const matchElement = root.querySelector(`#${element.id}`);\n          if (matchElement) {\n            // @ts-ignore - use proposed moveBefore feature\n            if (matchElement.parentElement?.moveBefore) {\n              // @ts-ignore - use proposed moveBefore feature\n              matchElement.parentElement.moveBefore(element, matchElement);\n              while (matchElement.hasChildNodes()) {\n                // @ts-ignore - use proposed moveBefore feature\n                element.moveBefore(matchElement.firstChild, null);\n              }\n            } else {\n              matchElement.before(element);\n              while (matchElement.firstChild) {\n                element.insertBefore(matchElement.firstChild, null);\n              }\n            }\n            if (\n              ctx.callbacks.beforeNodeMorphed(element, matchElement) !== false\n            ) {\n              syncNodeFrom(matchElement, element, ctx);\n              ctx.callbacks.afterNodeMorphed(element, matchElement);\n            }\n            matchElement.remove();\n          }\n        });\n      ctx.pantry.remove();\n    }\n  }\n\n  //=============================================================================\n  // ID Set Functions\n  //=============================================================================\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {string} id\n   * @returns {boolean}\n   */\n  function isIdInConsideration(ctx, id) {\n    return !ctx.deadIds.has(id);\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {string} id\n   * @param {Node} targetNode\n   * @returns {boolean}\n   */\n  function idIsWithinNode(ctx, id, targetNode) {\n    let idSet = ctx.idMap.get(targetNode) || EMPTY_SET;\n    return idSet.has(id);\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {Node} node\n   * @returns {void}\n   */\n  function removeIdsFromConsideration(ctx, node) {\n    let idSet = ctx.idMap.get(node) || EMPTY_SET;\n    for (const id of idSet) {\n      ctx.deadIds.add(id);\n    }\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function hasPersistentIdNodes(ctx, node) {\n    for (const id of ctx.idMap.get(node) || EMPTY_SET) {\n      if (ctx.persistentIds.has(id)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   *\n   * @param {MorphContext} ctx\n   * @param {Node} node1\n   * @param {Node} node2\n   * @returns {number}\n   */\n  function getIdIntersectionCount(ctx, node1, node2) {\n    let sourceSet = ctx.idMap.get(node1) || EMPTY_SET;\n    let matchCount = 0;\n    for (const id of sourceSet) {\n      // a potential match is an id in the source and potentialIdsSet, but\n      // that has not already been merged into the DOM\n      if (isIdInConsideration(ctx, id) && idIsWithinNode(ctx, id, node2)) {\n        ++matchCount;\n      }\n    }\n    return matchCount;\n  }\n\n  /**\n   * @param {Element} content\n   * @returns {Element[]}\n   */\n  function nodesWithIds(content) {\n    let nodes = Array.from(content.querySelectorAll(\"[id]\"));\n    if (content.id) {\n      nodes.push(content);\n    }\n    return nodes;\n  }\n\n  /**\n   * A bottom up algorithm that finds all elements with ids in the node\n   * argument and populates id sets for those nodes and all their parents, generating\n   * a set of ids contained within all nodes for the entire hierarchy in the DOM\n   *\n   * @param {Element} node\n   * @param {Map<Node, Set<string>>} idMap\n   */\n  function populateIdMapForNode(node, idMap) {\n    let nodeParent = node.parentElement;\n    for (const elt of nodesWithIds(node)) {\n      /**\n       * @type {Element|null}\n       */\n      let current = elt;\n      // walk up the parent hierarchy of that element, adding the id\n      // of element to the parent's id set\n      while (current !== nodeParent && current != null) {\n        let idSet = idMap.get(current);\n        // if the id set doesn't exist, create it and insert it in the  map\n        if (idSet == null) {\n          idSet = new Set();\n          idMap.set(current, idSet);\n        }\n        idSet.add(elt.id);\n        current = current.parentElement;\n      }\n    }\n  }\n\n  /**\n   * This function computes a map of nodes to all ids contained within that node (inclusive of the\n   * node).  This map can be used to ask if two nodes have intersecting sets of ids, which allows\n   * for a looser definition of \"matching\" than tradition id matching, and allows child nodes\n   * to contribute to a parent nodes matching.\n   *\n   * @param {Element} oldContent  the old content that will be morphed\n   * @param {Element} newContent  the new content to morph to\n   * @returns {Map<Node, Set<string>>} a map of nodes to id sets for the\n   */\n  function createIdMap(oldContent, newContent) {\n    /**\n     *\n     * @type {Map<Node, Set<string>>}\n     */\n    let idMap = new Map();\n    populateIdMapForNode(oldContent, idMap);\n    populateIdMapForNode(newContent, idMap);\n    return idMap;\n  }\n\n  /**\n   * @param {Element} oldContent  the old content that will be morphed\n   * @param {Element} newContent  the new content to morph to\n   * @returns {Set<string>} the id set of all persistent nodes that exist in both old and new content\n   */\n  function createPersistentIds(oldContent, newContent) {\n    const toIdTagName = (node) => node.tagName + \"#\" + node.id;\n    const oldIdSet = new Set(nodesWithIds(oldContent).map(toIdTagName));\n\n    let matchIdSet = new Set();\n    for (const newNode of nodesWithIds(newContent)) {\n      if (oldIdSet.has(toIdTagName(newNode))) {\n        matchIdSet.add(newNode.id);\n      }\n    }\n    return matchIdSet;\n  }\n\n  //=============================================================================\n  // This is what ends up becoming the Idiomorph global object\n  //=============================================================================\n  return {\n    morph,\n    defaults,\n  };\n})();\n\nexport {Idiomorph};\n","\nconst topics: any = {}\nconst _async: any = {}\n\nexport const publish = (name, params) => {\n\t_async[name] = Object.assign({}, _async[name], params)\n\tif (topics[name])\n\t\ttopics[name].forEach(topic => topic(params))\n}\n\nexport const subscribe = (name, method) => {\n\ttopics[name] = topics[name] || []\n\ttopics[name].push(method)\n\tif (name in _async) {\n\t\tmethod(_async[name])\n\t}\n\treturn () => {\n\t\ttopics[name] = topics[name].filter( fn => fn != method )\n\t}\n}\n","import { safe, rAF, g } from './utils'\nimport { Idiomorph } from 'idiomorph/dist/idiomorph.esm'\nimport { publish, subscribe } from './utils/pubsub'\n\nexport const Component = ({ name, module, dependencies, node, templates, signal }) => {\n\n\tconst _model \t\t= module.model || {}\n\tconst initialState \t= (new Function( `return ${node.getAttribute('html-model') || '{}'}`))()\n\tconst tplid \t\t= node.getAttribute('tplid')\n\tconst scopeid \t\t= node.getAttribute('html-scope-id')\n\tconst tpl \t\t\t= templates[ tplid ]\n\tconst data \t\t\t= g.scope[ scopeid ]\n\tconst model  \t\t= module?.model?.apply ? _model({ elm:node, initialState }) : _model\n\tconst state \t\t= Object.assign({}, data, model, initialState)\n\tconst view \t\t\t= module.view? module.view : (data) => data\n\n\tlet updates \t\t= []\n\n\tconst base = {\n\t\tname,\n\t\tmodel,\n\t\telm: node,\n\t\ttemplate: tpl.template,\n\t\tdependencies,\n\t\tpublish,\n\t\tsubscribe,\n\n\t\tmain(fn) {\n\t\t\tnode.addEventListener(':mount', fn)\n\t\t},\n\n\t\t/**\n\t\t * @State\n\t\t */\n\t\tstate : {\n\n\t\t\tsave(data) {\n\t\t\t\tif( data.constructor === Function ) {\n\t\t\t\t\tdata( state )\n\t\t\t\t} else {\n\t\t\t\t\tObject.assign(state, data)\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tset( data ) {\n\n\t\t\t\tif (!document.body.contains(node)) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif( data.constructor === Function ) {\n\t\t\t\t\tdata(state)\n\t\t\t\t} else {\n\t\t\t\t\tObject.assign(state, data)\n\t\t\t\t}\n\n\t\t\t\tconst newstate = Object.assign({}, state)\n\n\t\t\t\tupdates.push(data)\n\n\t\t\t\treturn new Promise((resolve) => {\n\t\t\t\t\trAF(() => {\n\t\t\t\t\t\tObject.assign.apply(null, [newstate, ...updates ])\n\t\t\t\t\t\tif( updates.length ){\n\t\t\t\t\t\t\trender(newstate)\n\t\t\t\t\t\t\tresolve(newstate)\n\t\t\t\t\t\t\tupdates = []\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t},\n\n\t\t\tget() {\n\t\t\t\treturn Object.assign({}, state)\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * @Events\n\t\t */\n\t\ton( ev, selectorOrCallback, callback ) {\n\n\t\t\tif( callback ) {\n\t\t\t\tcallback.handler = (e) => {\n\t\t\t\t\tconst detail = e.detail || {}\n\t\t\t\t\tlet parent = e.target\n\t\t\t\t\twhile (parent) {\n\t\t\t\t\t\tif (parent.matches(selectorOrCallback)) {\n\t\t\t\t\t\t\te.delegateTarget = parent\n\t\t\t\t\t\t\tcallback.apply(node, [e].concat(detail.args))\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (parent === node) break\n\t\t\t\t\t\tparent = parent.parentNode\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnode.addEventListener(ev, callback.handler, {\n\t\t\t\t\tsignal,\n\t\t\t\t\tcapture: (ev == 'focus' || ev == 'blur' || ev == 'mouseenter' || ev == 'mouseleave')\n\t\t\t\t})\n\n\t\t\t} else {\n\t\t\t\tselectorOrCallback.handler = (e) => {\n\t\t\t\t\te.delegateTarget = node\n\t\t\t\t\tselectorOrCallback.apply(node, [e].concat(e.detail.args))\n\t\t\t\t}\n\t\t\t\tnode.addEventListener(ev, selectorOrCallback.handler, { signal })\n\t\t\t}\n\t\t},\n\n\t\toff( ev, callback ) {\n\t\t\tif( callback.handler ) {\n\t\t\t\tnode.removeEventListener(ev, callback.handler)\n\t\t\t}\n\t\t},\n\n\t\ttrigger(ev, selectorOrCallback, data) {\n\t\t\tif( selectorOrCallback.constructor === String ) {\n\t\t\t\tArray\n\t\t\t\t\t.from(node.querySelectorAll(selectorOrCallback))\n\t\t\t\t\t.forEach( children => {\n\t\t\t\t\t\tchildren.dispatchEvent(new CustomEvent(ev, { bubbles: true, detail: { args: data } }) )\n\t\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tnode.dispatchEvent(new CustomEvent(ev, { bubbles: true, detail:{ args: data } }))\n\t\t\t}\n\t\t},\n\n\t\temit(ev, data) {\n\t\t\tnode.dispatchEvent(new CustomEvent(ev, { bubbles: true, detail: { args: data } }))\n\t\t},\n\n\t\tunmount( fn ) {\n\t\t\tnode.addEventListener(':unmount', fn)\n\t\t},\n\n\t\tinnerHTML ( target, html_ ) {\n\t\t\tconst element = html_? target : elm\n\t\t\tconst clone = element.cloneNode()\n\t\t\tconst html = html_? html_ : target\n\t\t\tclone.innerHTML = html\n\n\t\t\trAF( _ => Idiomorph.morph(element, clone, IdiomorphOptions) )\n\t\t}\n\t}\n\n\tconst render = ( data ) => {\n\n\t\tconst html = tpl.render.call( view(data), node, safe, g )\n\t\tIdiomorph.morph( node, html, IdiomorphOptions(node) )\n\n\t\trAF(() => {\n\t\t\tnode.querySelectorAll('[tplid]')\n\t\t\t.forEach((element) => {\n\t\t\t\tif(!element.base) return\n\t\t\t\tconst base = element.base\n\t\t\t\tconst props = Object.keys(base.model).reduce((acc, key) => {\n\t\t\t\t\tif( key in data ) {\n\t\t\t\t\t\tif( !acc ) acc = {}\n\t\t\t\t\t\tacc[key] = data[key]\n\t\t\t\t\t}\n\t\t\t\t\treturn acc\n\t\t\t\t}, null)\n\t\t\t\tif( props ) {\n\t\t\t\t\tbase.state.set( props )\n\t\t\t\t}\n\t\t\t})\n\t\t\trAF(() => g.scope = {})\n\t\t})\n\n\t}\n\n\tnode.base = base\n\treturn module.default( base )\n}\n\nconst IdiomorphOptions = ( parent ) => ({\n\tcallbacks: {\n\t\tbeforeNodeMorphed( node ) {\n\t\t\tif( node.nodeType === 1 ) {\n\t\t\t\tif( 'html-static' in node.attributes ) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tif( node.base && node !== parent ) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n})\n","import { Component } from './component'\n\nexport const Element = ({ component, templates, start }) => {\n\n\tconst { name, module, dependencies } = component\n\tconst abortController = new AbortController()\n\n\treturn class extends HTMLElement {\n\n\t\tconstructor() {\n\t\t\tsuper()\n\t\t}\n\n\t\tconnectedCallback() {\n\n\t\t\tif( !this.getAttribute('tplid') ) {\n\t\t\t\tstart( this.parentNode )\n\t\t\t}\n\n\t\t\tconst rtrn = Component({\n\t\t\t\tnode:this,\n\t\t\t\tname,\n\t\t\t\tmodule,\n\t\t\t\tdependencies,\n\t\t\t\ttemplates,\n\t\t\t\tsignal: abortController.signal\n\t\t\t})\n\n\t\t\tif ( rtrn && rtrn.constructor === Promise ) {\n\t\t\t\trtrn.then(() => this.dispatchEvent( new CustomEvent(':mount') ))\n\t\t\t} else {\n\t\t\t\tthis.dispatchEvent( new CustomEvent(':mount') )\n\t\t\t}\n\n\t\t\tthis.base.state.set({})\n\t\t}\n\n\t\tdisconnectedCallback() {\n\t\t\tthis.dispatchEvent( new CustomEvent(':unmount') )\n\t\t\tabortController.abort()\n\t\t\tdelete this.base\n\t\t}\n\t}\n}\n","import { uuid } from './utils'\n\nconst templates  = {}\n\nconst config = {\n\ttags: ['{{', '}}']\n}\n\nexport const templateConfig = (newconfig) => {\n\tObject.assign( config, newconfig )\n}\n\nexport const template = ( target, { components }) => {\n\n\ttagElements( target, [...Object.keys( components ), 'template'] )\n\tconst clone = target.cloneNode( true )\n\n\ttransformTemplate( clone )\n\tremoveTemplateTagsRecursively( clone )\n\tsetTemplates( clone, components )\n\n\treturn templates\n}\n\nexport const compile = ( outerHTML ) => {\n\n\tconst html = transformAttributes( outerHTML )\n\tconst parsedHtml = JSON.stringify( html )\n\n\treturn new Function('$element', 'safe', '$g',`\n\t\tvar $data = this;\n\t\twith( $data ){\n\t\t\tvar output=${parsedHtml\n\t\t\t\t.replace(/%%_=(.+?)_%%/g, function(_, variable){\n\t\t\t\t\treturn '\"+safe(function(){return '+ variable +';})+\"'\n\t\t\t\t})\n\t\t\t\t.replace(/%%_(.+?)_%%/g, function(_, variable){\n\t\t\t\t\treturn '\";' + variable +'\\noutput+=\"'\n\t\t\t\t})};return output;\n\t\t}\n\t`)\n}\n\nconst tagElements = ( target, keys ) => {\n\ttarget\n\t\t.querySelectorAll( keys.toString() )\n\t\t.forEach((node) => {\n\t\t\tif( node.localName === 'template' ) {\n\t\t\t\treturn tagElements( node.content, keys )\n\t\t\t}\n\t\t\tnode.setAttribute('tplid', uuid())\n\t\t})\n}\n\nconst transformAttributes = ( html ) => {\n\n\tconst regexTags = new RegExp(`\\\\${config.tags[0]}(.+?)\\\\${config.tags[1]}`, 'g')\n\n\treturn html\n\t\t.replace(/jails___scope-id/g, '%%_=$scopeid_%%')\n\t\t.replace(regexTags, '%%_=$1_%%')\n\t\t// Booleans\n\t\t// https://meiert.com/en/blog/boolean-attributes-of-html/\n\t\t.replace(/html-(allowfullscreen|async|autofocus|autoplay|checked|controls|default|defer|disabled|formnovalidate|inert|ismap|itemscope|loop|multiple|muted|nomodule|novalidate|open|playsinline|readonly|required|reversed|selected)=\\\"(.*?)\\\"/g, `%%_if(safe(function(){ return $2 })){_%%$1%%_}_%%`)\n\t\t// The rest\n\t\t.replace(/html-(.*?)=\\\"(.*?)\\\"/g, (all, key, value) => {\n\t\t\tif (key === 'key' || key === 'model' || key === 'scope-id' ) {\n\t\t\t\treturn all\n\t\t\t}\n\t\t\tif (value) {\n\t\t\t\tvalue = value.replace(/^{|}$/g, '')\n\t\t\t\treturn `${key}=\"%%_=safe(function(){ return ${value} })_%%\"`\n\t\t\t} else {\n\t\t\t\treturn all\n\t\t\t}\n\t\t})\n}\n\nconst transformTemplate = ( clone ) => {\n\n\tclone.querySelectorAll('template, [html-for], [html-if], [html-inner], [html-class]')\n\t\t.forEach(( element ) => {\n\n\t\t\tconst htmlFor \t= element.getAttribute('html-for')\n\t\t\tconst htmlIf \t= element.getAttribute('html-if')\n\t\t\tconst htmlInner = element.getAttribute('html-inner')\n\t\t\tconst htmlClass = element.getAttribute('html-class')\n\n\t\t\tif ( htmlFor ) {\n\n\t\t\t\telement.removeAttribute('html-for')\n\n\t\t\t\tconst split \t= htmlFor.match(/(.*)\\sin\\s(.*)/) || ''\n\t\t\t\tconst varname \t= split[1]\n\t\t\t\tconst object \t= split[2]\n\t\t\t\tconst open \t\t= document.createTextNode(`%%_ ;(function(){ var $index = 0; for(var $key in safe(function(){ return ${object} }) ){ var $scopeid = Math.random().toString(36).substring(2, 9); var ${varname} = ${object}[$key]; $g.scope[$scopeid] = { ${varname} :${varname}, ${object}: ${object}, $index: $index, $key: $key }; _%%`)\n\t\t\t\tconst close \t= document.createTextNode(`%%_ $index++; } })() _%%`)\n\n\t\t\t\twrap(open, element, close)\n\t\t\t}\n\n\t\t\tif (htmlIf) {\n\t\t\t\telement.removeAttribute('html-if')\n\t\t\t\tconst open = document.createTextNode(`%%_ if ( safe(function(){ return ${htmlIf} }) ){ _%%`)\n\t\t\t\tconst close = document.createTextNode(`%%_ } _%%`)\n\t\t\t\twrap(open, element, close)\n\t\t\t}\n\n\t\t\tif (htmlInner) {\n\t\t\t\telement.removeAttribute('html-inner')\n\t\t\t\telement.innerHTML = `%%_=${htmlInner}_%%`\n\t\t\t}\n\n\t\t\tif (htmlClass) {\n\t\t\t\telement.removeAttribute('html-class')\n\t\t\t\telement.className = (element.className + ` %%_=${htmlClass}_%%`).trim()\n\t\t\t}\n\n\t\t\tif( element.localName === 'template' ) {\n\t\t\t\ttransformTemplate(element.content)\n\t\t\t}\n\t\t})\n}\n\nconst setTemplates = ( clone, components ) => {\n\n\tArray.from(clone.querySelectorAll('[tplid]'))\n\t\t.reverse()\n\t\t.forEach((node) => {\n\n\t\t\tconst tplid = node.getAttribute('tplid')\n\t\t\tconst name  = node.localName\n\t\t\tnode.setAttribute('html-scope-id', 'jails___scope-id')\n\n\t\t\tif( name in components && components[name].module.template ) {\n\t\t\t\tconst children = node.innerHTML\n\t\t\t\tconst html = components[name].module.template({ elm:node, children })\n\n\t\t\t\tif( html.constructor === Promise ) {\n\t\t\t\t\thtml.then( htmlstring => {\n\t\t\t\t\t\tnode.innerHTML = htmlstring\n\t\t\t\t\t\tconst html = node.outerHTML\n\t\t\t\t\t\ttemplates[tplid] = {\n\t\t\t\t\t\t\ttemplate: html,\n\t\t\t\t\t\t\trender: compile(html)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tnode.innerHTML = html\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst html = node.outerHTML\n\n\t\t\ttemplates[ tplid ] = {\n\t\t\t\ttemplate: html,\n\t\t\t\trender\t: compile(html)\n\t\t\t}\n\t\t})\n}\n\nconst removeTemplateTagsRecursively = (node) => {\n\n\t// Get all <template> elements within the node\n\tconst templates = node.querySelectorAll('template')\n\n\ttemplates.forEach((template) => {\n\n\t\tif( template.getAttribute('html-if') || template.getAttribute('html-inner') ) {\n\t\t\treturn\n\t\t}\n\n\t\t// Process any nested <template> tags within this <template> first\n\t\tremoveTemplateTagsRecursively(template.content)\n\n\t\t// Get the parent of the <template> tag\n\t\tconst parent = template.parentNode\n\n\t\tif (parent) {\n\t\t\t// Move all child nodes from the <template>'s content to its parent\n\t\t\tconst content = template.content\n\t\t\twhile (content.firstChild) {\n\t\t\t\tparent.insertBefore(content.firstChild, template)\n\t\t\t}\n\t\t\t// Remove the <template> tag itself\n\t\t\tparent.removeChild(template)\n\t\t}\n\t})\n}\n\nconst wrap = (open, node, close) => {\n\tnode.parentNode?.insertBefore(open, node)\n\tnode.parentNode?.insertBefore(close, node.nextSibling)\n}\n","import { Element } from './element'\nimport { template, templateConfig as config } from './template-system'\n\nconst components = {}\n\nexport { publish, subscribe } from './utils/pubsub'\n\nexport const templateConfig = (options) => {\n\tconfig( options )\n}\n\nexport const register = ( name, module, dependencies ) => {\n\tcomponents[ name ] = { name, module, dependencies }\n}\n\nexport const start = ( target = document.body ) => {\n\n\tconst templates = template( target, { components } )\n\n\tObject\n\t\t.values( components )\n\t\t.forEach(({ name, module, dependencies }) => {\n\t\t\tif( !customElements.get(name) ) {\n\t\t\t\tcustomElements.define( name, Element({ component: { name, module, dependencies }, templates, start }) )\n\t\t\t}\n\t})\n}\n"],"names":["g","scope","rAF","fn","requestAnimationFrame","setTimeout","safe","execute","val","err","Idiomorph","EMPTY_SET","Set","defaults","morphStyle","callbacks","beforeNodeAdded","noOp","afterNodeAdded","beforeNodeMorphed","afterNodeMorphed","beforeNodeRemoved","afterNodeRemoved","beforeAttributeUpdated","beforeNodePantried","head","style","shouldPreserve","elt","getAttribute","shouldReAppend","shouldRemove","afterHeadMorphed","morphNormalizedContent","oldNode","normalizedNewContent","ctx","block","oldHead","querySelector","newHead","promises","handleHeadElement","Promise","all","then","Object","assign","ignore","morphChildren","config","twoPass","restoreFromPantry","Array","from","children","bestMatch","newContent","currentElement","firstChild","bestElement","score","newScore","scoreElement","nextSibling","findBestNodeMatch","previousSibling","_a","_b","morphedNode","morphOldNodeTo","elements","stack","added","push","node","pop","parentElement","insertBefore","length","insertSiblings","parentNode","ignoreValueOfActiveElement","possibleActiveElement","ignoreActiveValue","document","activeElement","body","ignoreActive","removeChild","isSoftMatch","HTMLHeadElement","syncNodeFrom","replaceChild","newParent","oldParent","HTMLTemplateElement","content","newChild","nextNewChild","insertionPoint","persistentIds","has","id","appendChild","removeIdsFromConsideration","isIdSetMatch","idSetMatch","findIdSetMatch","removeNodesBetween","softMatch","findSoftMatch","tempNode","removeNode","ignoreAttribute","attr","to","updateType","type","nodeType","fromEl","toEl","fromAttributes","attributes","toAttributes","fromAttribute","name","value","setAttribute","i","toAttribute","hasAttribute","removeAttribute","nodeValue","HTMLInputElement","fromValue","toValue","syncBooleanAttribute","HTMLOptionElement","HTMLTextAreaElement","syncInputValue","attributeName","Element","fromLiveValue","ignoreUpdate","newHeadTag","currentHead","removed","preserved","nodesToAppend","headMergeStyle","srcToNewHeadNodes","Map","newHeadChild","set","outerHTML","currentHeadElt","inNewContent","isReAppended","isPreserved","delete","values","newNode","newElt","createRange","createContextualFragment","href","src","resolve","promise","_resolve","addEventListener","removedElement","kept","createPantry","pantry","createElement","hidden","insertAdjacentElement","node1","node2","tagName","getIdIntersectionCount","startInclusive","endExclusive","cursor","newChildPotentialIdCount","potentialMatch","otherMatchCount","potentialSoftMatch","siblingSoftMatchCount","generatedByIdiomorph","WeakSet","idMap","get","hasPersistentIdNodes","moveToPantry","childNodes","forEach","child","moveBefore","root","reverse","element","matchElement","hasChildNodes","before","remove","isIdInConsideration","deadIds","idIsWithinNode","targetNode","idSet","add","sourceSet","matchCount","nodesWithIds","nodes","querySelectorAll","populateIdMapForNode","nodeParent","current","createIdMap","oldContent","createPersistentIds","toIdTagName","oldIdSet","map","matchIdSet","morph","Document","documentElement","parser","DOMParser","contentWithSvgsRemoved","replace","match","parseFromString","htmlElement","parseContent","normalizedContent","Node","dummyParent","append","normalizeContent","mergedConfig","finalConfig","mergeDefaults","target","createMorphContext","topics","_async","publish","params","topic","subscribe","method","filter","IdiomorphOptions","parent","base","component","templates","start","module","dependencies","abortController","AbortController","HTMLElement","constructor","super","connectedCallback","this","rtrn","signal","_model","model","initialState","Function","tplid","scopeid","tpl","data","apply","elm","state","view","updates","template","main","save","contains","newstate","render","on","ev","selectorOrCallback","callback","handler","e","detail","matches","delegateTarget","concat","args","capture","off","removeEventListener","trigger","String","dispatchEvent","CustomEvent","bubbles","emit","unmount","innerHTML","html_","clone","cloneNode","html","call","props","keys","reduce","acc","key","base2","default","Component","disconnectedCallback","abort","tags","compile","transformAttributes","parsedHtml","JSON","stringify","_","variable","tagElements","toString","localName","Math","random","substring","regexTags","RegExp","transformTemplate","htmlFor","htmlIf","htmlInner","htmlClass","split","varname","object","open","createTextNode","close","wrap","className","trim","setTemplates","components","html2","htmlstring","removeTemplateTagsRecursively","customElements","define","options","newconfig"],"mappings":"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","x_google_ignoreList":[1]}